
Controle PI Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e78  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006000  08006000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006030  08006030  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  08006030  08006030  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006030  08006030  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006034  08006034  00007034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006038  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008010  2**0
                  CONTENTS
 10 .bss          000001a0  20000010  20000010  00008010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00008010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd34  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022d2  00000000  00000000  00015d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00018048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7d  00000000  00000000  00018de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed41  00000000  00000000  0001985d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119d1  00000000  00000000  0003859e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c12ff  00000000  00000000  00049f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b26e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039dc  00000000  00000000  0010b2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0010ec90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fe8 	.word	0x08005fe8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005fe8 	.word	0x08005fe8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f000 fd6e 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f83c 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 fa32 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a54:	f000 fa12 	bl	8000e7c <MX_DMA_Init>
  MX_ADC1_Init();
 8000a58:	f000 f894 	bl	8000b84 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a5c:	f000 f932 	bl	8000cc4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a60:	f000 f9be 	bl	8000de0 <MX_TIM2_Init>
  MX_COMP2_Init();
 8000a64:	f000 f8fe 	bl	8000c64 <MX_COMP2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &leitura, 1);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4910      	ldr	r1, [pc, #64]	@ (8000aac <main+0x68>)
 8000a6c:	4810      	ldr	r0, [pc, #64]	@ (8000ab0 <main+0x6c>)
 8000a6e:	f000 ffbf 	bl	80019f0 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a72:	2100      	movs	r1, #0
 8000a74:	480f      	ldr	r0, [pc, #60]	@ (8000ab4 <main+0x70>)
 8000a76:	f004 f92b 	bl	8004cd0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a7a:	480f      	ldr	r0, [pc, #60]	@ (8000ab8 <main+0x74>)
 8000a7c:	f004 f866 	bl	8004b4c <HAL_TIM_Base_Start_IT>
  HAL_COMP_Start_IT(&hcomp2);
 8000a80:	480e      	ldr	r0, [pc, #56]	@ (8000abc <main+0x78>)
 8000a82:	f001 fe87 	bl	8002794 <HAL_COMP_Start_IT>

  u[0]=0;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <main+0x7c>)
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
  u[1]=0;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <main+0x7c>)
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  e[0]=0;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <main+0x80>)
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
  e[1]=0;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <main+0x80>)
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa6:	bf00      	nop
 8000aa8:	e7fd      	b.n	8000aa6 <main+0x62>
 8000aaa:	bf00      	nop
 8000aac:	20000188 	.word	0x20000188
 8000ab0:	2000002c 	.word	0x2000002c
 8000ab4:	200000f0 	.word	0x200000f0
 8000ab8:	2000013c 	.word	0x2000013c
 8000abc:	200000c0 	.word	0x200000c0
 8000ac0:	20000194 	.word	0x20000194
 8000ac4:	200001a4 	.word	0x200001a4

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09e      	sub	sp, #120	@ 0x78
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ad2:	2228      	movs	r2, #40	@ 0x28
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 fa5a 	bl	8005f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	223c      	movs	r2, #60	@ 0x3c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f005 fa4c 	bl	8005f90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af8:	2301      	movs	r3, #1
 8000afa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b00:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b06:	2301      	movs	r3, #1
 8000b08:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b12:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b14:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b18:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fbfe 	bl	8003320 <HAL_RCC_OscConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b2a:	f000 fa01 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	230f      	movs	r3, #15
 8000b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	2302      	movs	r3, #2
 8000b34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fc26 	bl	800439c <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b56:	f000 f9eb 	bl	8000f30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000b5a:	f44f 5384 	mov.w	r3, #4224	@ 0x1080
 8000b5e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fde5 	bl	800473c <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b78:	f000 f9da 	bl	8000f30 <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3778      	adds	r7, #120	@ 0x78
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	@ 0x28
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000ba8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bce:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bda:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c00:	4817      	ldr	r0, [pc, #92]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000c02:	f000 fd15 	bl	8001630 <HAL_ADC_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c0c:	f000 f990 	bl	8000f30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4811      	ldr	r0, [pc, #68]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000c1c:	f001 faee 	bl	80021fc <HAL_ADCEx_MultiModeConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c26:	f000 f983 	bl	8000f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000c36:	2307      	movs	r3, #7
 8000c38:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <MX_ADC1_Init+0xdc>)
 8000c48:	f000 ffee 	bl	8001c28 <HAL_ADC_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000c52:	f000 f96d 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000002c 	.word	0x2000002c

08000c64 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000c6a:	4a15      	ldr	r2, [pc, #84]	@ (8000cc0 <MX_COMP2_Init+0x5c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_3_4VREFINT;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000c70:	2220      	movs	r2, #32
 8000c72:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000c7c:	227f      	movs	r2, #127	@ 0x7f
 8000c7e:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_MEDIUM;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000c88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c8c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_COMP2_Init+0x58>)
 8000ca8:	f001 fcca 	bl	8002640 <HAL_COMP_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8000cb2:	f000 f93d 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000c0 	.word	0x200000c0
 8000cc0:	40010020 	.word	0x40010020

08000cc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b096      	sub	sp, #88	@ 0x58
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	222c      	movs	r2, #44	@ 0x2c
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f005 f94d 	bl	8005f90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cf6:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000cf8:	4a38      	ldr	r2, [pc, #224]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000cfc:	4b36      	ldr	r3, [pc, #216]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000cfe:	22b3      	movs	r2, #179	@ 0xb3
 8000d00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000d08:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000d0a:	2264      	movs	r2, #100	@ 0x64
 8000d0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b32      	ldr	r3, [pc, #200]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d14:	4b30      	ldr	r3, [pc, #192]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d20:	482d      	ldr	r0, [pc, #180]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000d22:	f003 ff7d 	bl	8004c20 <HAL_TIM_PWM_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000d2c:	f000 f900 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d40:	4619      	mov	r1, r3
 8000d42:	4825      	ldr	r0, [pc, #148]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000d44:	f005 f808 	bl	8005d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000d4e:	f000 f8ef 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	2360      	movs	r3, #96	@ 0x60
 8000d54:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4818      	ldr	r0, [pc, #96]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000d78:	f004 f9ac 	bl	80050d4 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000d82:	f000 f8d5 	bl	8000f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000da8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000dbc:	f005 f84c 	bl	8005e58 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000dc6:	f000 f8b3 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dca:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <MX_TIM1_Init+0x114>)
 8000dcc:	f000 f9ca 	bl	8001164 <HAL_TIM_MspPostInit>

}
 8000dd0:	bf00      	nop
 8000dd2:	3758      	adds	r7, #88	@ 0x58
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200000f0 	.word	0x200000f0
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <MX_TIM2_Init+0x98>)
 8000e00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <MX_TIM2_Init+0x98>)
 8000e08:	2247      	movs	r2, #71	@ 0x47
 8000e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <MX_TIM2_Init+0x98>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <MX_TIM2_Init+0x98>)
 8000e14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <MX_TIM2_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_TIM2_Init+0x98>)
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e26:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <MX_TIM2_Init+0x98>)
 8000e28:	f003 fe38 	bl	8004a9c <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e32:	f000 f87d 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	@ (8000e78 <MX_TIM2_Init+0x98>)
 8000e44:	f004 fa5a 	bl	80052fc <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e4e:	f000 f86f 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <MX_TIM2_Init+0x98>)
 8000e60:	f004 ff7a 	bl	8005d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e6a:	f000 f861 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000013c 	.word	0x2000013c

08000e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <MX_DMA_Init+0x38>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb4 <MX_DMA_Init+0x38>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <MX_DMA_Init+0x38>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200b      	movs	r0, #11
 8000ea0:	f001 fec1 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ea4:	200b      	movs	r0, #11
 8000ea6:	f001 feda 	bl	8002c5e <HAL_NVIC_EnableIRQ>

}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000ec4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a14      	ldr	r2, [pc, #80]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000edc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	6153      	str	r3, [r2, #20]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000f0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_GPIO_Init+0x74>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <Error_Handler+0x8>

08000f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f72:	2007      	movs	r0, #7
 8000f74:	f001 fe4c 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f001 fe52 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f001 fe6b 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fb4:	d14b      	bne.n	800104e <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fb6:	4b28      	ldr	r3, [pc, #160]	@ (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a27      	ldr	r2, [pc, #156]	@ (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4818      	ldr	r0, [pc, #96]	@ (800105c <HAL_ADC_MspInit+0xc8>)
 8000ffa:	f001 fffd 	bl	8002ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 8001000:	4a18      	ldr	r2, [pc, #96]	@ (8001064 <HAL_ADC_MspInit+0xd0>)
 8001002:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 8001012:	2280      	movs	r2, #128	@ 0x80
 8001014:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 8001020:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001024:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001026:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 8001028:	2220      	movs	r2, #32
 800102a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001032:	480b      	ldr	r0, [pc, #44]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 8001034:	f001 fe2d 	bl	8002c92 <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 800103e:	f7ff ff77 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 8001046:	639a      	str	r2, [r3, #56]	@ 0x38
 8001048:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <HAL_ADC_MspInit+0xcc>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	@ 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	48000800 	.word	0x48000800
 8001060:	2000007c 	.word	0x2000007c
 8001064:	40020008 	.word	0x40020008

08001068 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a13      	ldr	r2, [pc, #76]	@ (80010d4 <HAL_COMP_MspInit+0x6c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d120      	bne.n	80010cc <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <HAL_COMP_MspInit+0x70>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <HAL_COMP_MspInit+0x70>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <HAL_COMP_MspInit+0x70>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010a2:	2380      	movs	r3, #128	@ 0x80
 80010a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a6:	2303      	movs	r3, #3
 80010a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b8:	f001 ff9e 	bl	8002ff8 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2040      	movs	r0, #64	@ 0x40
 80010c2:	f001 fdb0 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80010c6:	2040      	movs	r0, #64	@ 0x40
 80010c8:	f001 fdc9 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END COMP2_MspInit 1 */

  }

}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40010020 	.word	0x40010020
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_TIM_PWM_MspInit+0x38>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10b      	bne.n	8001106 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_TIM_PWM_MspInit+0x3c>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <HAL_TIM_PWM_MspInit+0x3c>)
 80010f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <HAL_TIM_PWM_MspInit+0x3c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40012c00 	.word	0x40012c00
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800112c:	d113      	bne.n	8001156 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <HAL_TIM_Base_MspInit+0x44>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a0b      	ldr	r2, [pc, #44]	@ (8001160 <HAL_TIM_Base_MspInit+0x44>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <HAL_TIM_Base_MspInit+0x44>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	201c      	movs	r0, #28
 800114c:	f001 fd6b 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001150:	201c      	movs	r0, #28
 8001152:	f001 fd84 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a11      	ldr	r2, [pc, #68]	@ (80011c8 <HAL_TIM_MspPostInit+0x64>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d11c      	bne.n	80011c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_TIM_MspPostInit+0x68>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <HAL_TIM_MspPostInit+0x68>)
 800118c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_TIM_MspPostInit+0x68>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800119e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_TIM_MspPostInit+0x6c>)
 80011bc:	f001 ff1c 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40012c00 	.word	0x40012c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48001000 	.word	0x48001000

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <NMI_Handler+0x4>

080011dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <MemManage_Handler+0x4>

080011ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122a:	f000 f9c3 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}

08001232 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line16.
  */
void PVD_IRQHandler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001236:	f002 f859 	bl	80032ec <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <DMA1_Channel1_IRQHandler+0x10>)
 8001246:	f001 fdca 	bl	8002dde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000007c 	.word	0x2000007c
 8001254:	00000000 	.word	0x00000000

08001258 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800125c:	4864      	ldr	r0, [pc, #400]	@ (80013f0 <TIM2_IRQHandler+0x198>)
 800125e:	f003 fe37 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	vel = velocidade(&count);
 8001262:	4864      	ldr	r0, [pc, #400]	@ (80013f4 <TIM2_IRQHandler+0x19c>)
 8001264:	f000 f8ec 	bl	8001440 <velocidade>
 8001268:	eef0 7a40 	vmov.f32	s15, s0
 800126c:	4b62      	ldr	r3, [pc, #392]	@ (80013f8 <TIM2_IRQHandler+0x1a0>)
 800126e:	edc3 7a00 	vstr	s15, [r3]
	ref = leitura / (4095.0 / 100);
 8001272:	4b62      	ldr	r3, [pc, #392]	@ (80013fc <TIM2_IRQHandler+0x1a4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f8e8 	bl	800044c <__aeabi_ui2d>
 800127c:	a354      	add	r3, pc, #336	@ (adr r3, 80013d0 <TIM2_IRQHandler+0x178>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff fa87 	bl	8000794 <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fb89 	bl	80009a4 <__aeabi_d2f>
 8001292:	4603      	mov	r3, r0
 8001294:	4a5a      	ldr	r2, [pc, #360]	@ (8001400 <TIM2_IRQHandler+0x1a8>)
 8001296:	6013      	str	r3, [r2, #0]

	e[k] = ref - vel;
 8001298:	4b59      	ldr	r3, [pc, #356]	@ (8001400 <TIM2_IRQHandler+0x1a8>)
 800129a:	ed93 7a00 	vldr	s14, [r3]
 800129e:	4b56      	ldr	r3, [pc, #344]	@ (80013f8 <TIM2_IRQHandler+0x1a0>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	4b57      	ldr	r3, [pc, #348]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ac:	4a56      	ldr	r2, [pc, #344]	@ (8001408 <TIM2_IRQHandler+0x1b0>)
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	edc3 7a00 	vstr	s15, [r3]

	u[k] = u[k-1] + 0.01273 * e[k] - 0.01126 * e[k-1];
 80012b6:	4b53      	ldr	r3, [pc, #332]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	4a53      	ldr	r2, [pc, #332]	@ (800140c <TIM2_IRQHandler+0x1b4>)
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8e3 	bl	8000490 <__aeabi_f2d>
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001408 <TIM2_IRQHandler+0x1b0>)
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8d8 	bl	8000490 <__aeabi_f2d>
 80012e0:	a33d      	add	r3, pc, #244	@ (adr r3, 80013d8 <TIM2_IRQHandler+0x180>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f92b 	bl	8000540 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4620      	mov	r0, r4
 80012f0:	4629      	mov	r1, r5
 80012f2:	f7fe ff6f 	bl	80001d4 <__adddf3>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4614      	mov	r4, r2
 80012fc:	461d      	mov	r5, r3
 80012fe:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3b01      	subs	r3, #1
 8001304:	4a40      	ldr	r2, [pc, #256]	@ (8001408 <TIM2_IRQHandler+0x1b0>)
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f8bf 	bl	8000490 <__aeabi_f2d>
 8001312:	a333      	add	r3, pc, #204	@ (adr r3, 80013e0 <TIM2_IRQHandler+0x188>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f912 	bl	8000540 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7fe ff54 	bl	80001d0 <__aeabi_dsub>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4935      	ldr	r1, [pc, #212]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 800132e:	680c      	ldr	r4, [r1, #0]
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb36 	bl	80009a4 <__aeabi_d2f>
 8001338:	4602      	mov	r2, r0
 800133a:	4934      	ldr	r1, [pc, #208]	@ (800140c <TIM2_IRQHandler+0x1b4>)
 800133c:	00a3      	lsls	r3, r4, #2
 800133e:	440b      	add	r3, r1
 8001340:	601a      	str	r2, [r3, #0]

	duty = u[k] * (100.0 / 3);
 8001342:	4b30      	ldr	r3, [pc, #192]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a31      	ldr	r2, [pc, #196]	@ (800140c <TIM2_IRQHandler+0x1b4>)
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f89e 	bl	8000490 <__aeabi_f2d>
 8001354:	a324      	add	r3, pc, #144	@ (adr r3, 80013e8 <TIM2_IRQHandler+0x190>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f8f1 	bl	8000540 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fafd 	bl	8000964 <__aeabi_d2uiz>
 800136a:	4603      	mov	r3, r0
 800136c:	4a28      	ldr	r2, [pc, #160]	@ (8001410 <TIM2_IRQHandler+0x1b8>)
 800136e:	6013      	str	r3, [r2, #0]

	if (duty > 100) {
 8001370:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <TIM2_IRQHandler+0x1b8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b64      	cmp	r3, #100	@ 0x64
 8001376:	d909      	bls.n	800138c <TIM2_IRQHandler+0x134>
		duty = 100;
 8001378:	4b25      	ldr	r3, [pc, #148]	@ (8001410 <TIM2_IRQHandler+0x1b8>)
 800137a:	2264      	movs	r2, #100	@ 0x64
 800137c:	601a      	str	r2, [r3, #0]
		u[k] = 100 * (3.0 / 100);
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a22      	ldr	r2, [pc, #136]	@ (800140c <TIM2_IRQHandler+0x1b4>)
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	4a22      	ldr	r2, [pc, #136]	@ (8001414 <TIM2_IRQHandler+0x1bc>)
 800138a:	601a      	str	r2, [r3, #0]
	} else if (duty < 0) {
		duty = 0;
		u[k] = 0;
	}

	TIM1->CCR1 = duty;
 800138c:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <TIM2_IRQHandler+0x1c0>)
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <TIM2_IRQHandler+0x1b8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6353      	str	r3, [r2, #52]	@ 0x34

	e[k-1] = e[k];
 8001394:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	491a      	ldr	r1, [pc, #104]	@ (8001408 <TIM2_IRQHandler+0x1b0>)
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	440a      	add	r2, r1
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	4918      	ldr	r1, [pc, #96]	@ (8001408 <TIM2_IRQHandler+0x1b0>)
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	601a      	str	r2, [r3, #0]
	u[k-1] = u[k];
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <TIM2_IRQHandler+0x1ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	4914      	ldr	r1, [pc, #80]	@ (800140c <TIM2_IRQHandler+0x1b4>)
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	440a      	add	r2, r1
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	4912      	ldr	r1, [pc, #72]	@ (800140c <TIM2_IRQHandler+0x1b4>)
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bdb0      	pop	{r4, r5, r7, pc}
 80013cc:	f3af 8000 	nop.w
 80013d0:	9999999a 	.word	0x9999999a
 80013d4:	40447999 	.word	0x40447999
 80013d8:	ad6cb535 	.word	0xad6cb535
 80013dc:	3f8a122f 	.word	0x3f8a122f
 80013e0:	9e060fe4 	.word	0x9e060fe4
 80013e4:	3f870f7b 	.word	0x3f870f7b
 80013e8:	aaaaaaab 	.word	0xaaaaaaab
 80013ec:	4040aaaa 	.word	0x4040aaaa
 80013f0:	2000013c 	.word	0x2000013c
 80013f4:	20000190 	.word	0x20000190
 80013f8:	200001a0 	.word	0x200001a0
 80013fc:	20000188 	.word	0x20000188
 8001400:	2000019c 	.word	0x2000019c
 8001404:	20000000 	.word	0x20000000
 8001408:	200001a4 	.word	0x200001a4
 800140c:	20000194 	.word	0x20000194
 8001410:	2000018c 	.word	0x2000018c
 8001414:	40400000 	.word	0x40400000
 8001418:	40012c00 	.word	0x40012c00

0800141c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8001420:	4804      	ldr	r0, [pc, #16]	@ (8001434 <COMP1_2_3_IRQHandler+0x18>)
 8001422:	f001 faab 	bl	800297c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */
  count++;
 8001426:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <COMP1_2_3_IRQHandler+0x1c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a02      	ldr	r2, [pc, #8]	@ (8001438 <COMP1_2_3_IRQHandler+0x1c>)
 800142e:	6013      	str	r3, [r2, #0]
  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200000c0 	.word	0x200000c0
 8001438:	20000190 	.word	0x20000190
 800143c:	00000000 	.word	0x00000000

08001440 <velocidade>:

/* USER CODE BEGIN 1 */

float velocidade(uint32_t *count) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	float vel = (1000*(float)(*count)/1024)*2*M_PI;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001454:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80014a8 <velocidade+0x68>
 8001458:	ee27 7a87 	vmul.f32	s14, s15, s14
 800145c:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80014ac <velocidade+0x6c>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001468:	ee17 0a90 	vmov	r0, s15
 800146c:	f7ff f810 	bl	8000490 <__aeabi_f2d>
 8001470:	a30b      	add	r3, pc, #44	@ (adr r3, 80014a0 <velocidade+0x60>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f863 	bl	8000540 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fa8f 	bl	80009a4 <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	60fb      	str	r3, [r7, #12]
	(*count) = 0;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
	return(vel);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	ee07 3a90 	vmov	s15, r3
}
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	54442d18 	.word	0x54442d18
 80014a4:	400921fb 	.word	0x400921fb
 80014a8:	447a0000 	.word	0x447a0000
 80014ac:	44800000 	.word	0x44800000

080014b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800150c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d8:	f7ff ffea 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopForever+0x6>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopForever+0xe>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopForever+0x16>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f004 fd4d 	bl	8005fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001506:	f7ff fa9d 	bl	8000a44 <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800150c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001518:	08006038 	.word	0x08006038
  ldr r2, =_sbss
 800151c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001520:	200001b0 	.word	0x200001b0

08001524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_2_IRQHandler>
	...

08001528 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <HAL_Init+0x28>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <HAL_Init+0x28>)
 8001532:	f043 0310 	orr.w	r3, r3, #16
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f001 fb69 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff fcfa 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000

08001554 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f001 fb81 	bl	8002c7a <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f001 fb49 	bl	8002c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	@ (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000004 	.word	0x20000004
 80015ac:	2000000c 	.word	0x2000000c
 80015b0:	20000008 	.word	0x20000008

080015b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	200001ac 	.word	0x200001ac

080015dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;  
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200001ac 	.word	0x200001ac

080015f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09a      	sub	sp, #104	@ 0x68
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e1c9      	b.n	80019e4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d176      	bne.n	8001750 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d152      	bne.n	8001710 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fc85 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d13b      	bne.n	8001710 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 ff6b 	bl	8002574 <ADC_Disable>
 800169e:	4603      	mov	r3, r0
 80016a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d12f      	bne.n	8001710 <HAL_ADC_Init+0xe0>
 80016b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d12b      	bne.n	8001710 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016c0:	f023 0302 	bic.w	r3, r3, #2
 80016c4:	f043 0202 	orr.w	r2, r3, #2
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016da:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80016ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016ec:	4b86      	ldr	r3, [pc, #536]	@ (8001908 <HAL_ADC_Init+0x2d8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a86      	ldr	r2, [pc, #536]	@ (800190c <HAL_ADC_Init+0x2dc>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9a      	lsrs	r2, r3, #18
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001702:	e002      	b.n	800170a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3b01      	subs	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f9      	bne.n	8001704 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800172c:	d110      	bne.n	8001750 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f023 0312 	bic.w	r3, r3, #18
 8001736:	f043 0210 	orr.w	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 8136 	bne.w	80019ca <HAL_ADC_Init+0x39a>
 800175e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 8131 	bne.w	80019ca <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 8129 	bne.w	80019ca <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001780:	f043 0202 	orr.w	r2, r3, #2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001790:	d004      	beq.n	800179c <HAL_ADC_Init+0x16c>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5e      	ldr	r2, [pc, #376]	@ (8001910 <HAL_ADC_Init+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_ADC_Init+0x170>
 800179c:	4b5d      	ldr	r3, [pc, #372]	@ (8001914 <HAL_ADC_Init+0x2e4>)
 800179e:	e000      	b.n	80017a2 <HAL_ADC_Init+0x172>
 80017a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001918 <HAL_ADC_Init+0x2e8>)
 80017a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017ac:	d102      	bne.n	80017b4 <HAL_ADC_Init+0x184>
 80017ae:	4b58      	ldr	r3, [pc, #352]	@ (8001910 <HAL_ADC_Init+0x2e0>)
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	e01a      	b.n	80017ea <HAL_ADC_Init+0x1ba>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a55      	ldr	r2, [pc, #340]	@ (8001910 <HAL_ADC_Init+0x2e0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d103      	bne.n	80017c6 <HAL_ADC_Init+0x196>
 80017be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e011      	b.n	80017ea <HAL_ADC_Init+0x1ba>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a54      	ldr	r2, [pc, #336]	@ (800191c <HAL_ADC_Init+0x2ec>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d102      	bne.n	80017d6 <HAL_ADC_Init+0x1a6>
 80017d0:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_ADC_Init+0x2f0>)
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e009      	b.n	80017ea <HAL_ADC_Init+0x1ba>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a51      	ldr	r2, [pc, #324]	@ (8001920 <HAL_ADC_Init+0x2f0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d102      	bne.n	80017e6 <HAL_ADC_Init+0x1b6>
 80017e0:	4b4e      	ldr	r3, [pc, #312]	@ (800191c <HAL_ADC_Init+0x2ec>)
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e001      	b.n	80017ea <HAL_ADC_Init+0x1ba>
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d108      	bne.n	800180a <HAL_ADC_Init+0x1da>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_ADC_Init+0x1da>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_ADC_Init+0x1dc>
 800180a:	2300      	movs	r3, #0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d11c      	bne.n	800184a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001810:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d010      	beq.n	8001838 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_ADC_Init+0x202>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_ADC_Init+0x202>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_ADC_Init+0x204>
 8001832:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001834:	2b00      	cmp	r3, #0
 8001836:	d108      	bne.n	800184a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	431a      	orrs	r2, r3
 8001846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001848:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7e5b      	ldrb	r3, [r3, #25]
 800184e:	035b      	lsls	r3, r3, #13
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001854:	2a01      	cmp	r2, #1
 8001856:	d002      	beq.n	800185e <HAL_ADC_Init+0x22e>
 8001858:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800185c:	e000      	b.n	8001860 <HAL_ADC_Init+0x230>
 800185e:	2200      	movs	r2, #0
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4313      	orrs	r3, r2
 800186e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001870:	4313      	orrs	r3, r2
 8001872:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d11b      	bne.n	80018b6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7e5b      	ldrb	r3, [r3, #25]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188a:	3b01      	subs	r3, #1
 800188c:	045a      	lsls	r2, r3, #17
 800188e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001890:	4313      	orrs	r3, r2
 8001892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001896:	663b      	str	r3, [r7, #96]	@ 0x60
 8001898:	e00d      	b.n	80018b6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80018a2:	f043 0220 	orr.w	r2, r3, #32
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f043 0201 	orr.w	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d03a      	beq.n	8001934 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a16      	ldr	r2, [pc, #88]	@ (800191c <HAL_ADC_Init+0x2ec>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <HAL_ADC_Init+0x2a2>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a14      	ldr	r2, [pc, #80]	@ (8001920 <HAL_ADC_Init+0x2f0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d128      	bne.n	8001924 <HAL_ADC_Init+0x2f4>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d6:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80018da:	d012      	beq.n	8001902 <HAL_ADC_Init+0x2d2>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018e4:	d00a      	beq.n	80018fc <HAL_ADC_Init+0x2cc>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80018ee:	d002      	beq.n	80018f6 <HAL_ADC_Init+0x2c6>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	e018      	b.n	8001928 <HAL_ADC_Init+0x2f8>
 80018f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018fa:	e015      	b.n	8001928 <HAL_ADC_Init+0x2f8>
 80018fc:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001900:	e012      	b.n	8001928 <HAL_ADC_Init+0x2f8>
 8001902:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001906:	e00f      	b.n	8001928 <HAL_ADC_Init+0x2f8>
 8001908:	20000004 	.word	0x20000004
 800190c:	431bde83 	.word	0x431bde83
 8001910:	50000100 	.word	0x50000100
 8001914:	50000300 	.word	0x50000300
 8001918:	50000700 	.word	0x50000700
 800191c:	50000400 	.word	0x50000400
 8001920:	50000500 	.word	0x50000500
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800192c:	4313      	orrs	r3, r2
 800192e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001930:	4313      	orrs	r3, r2
 8001932:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d114      	bne.n	800196c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001950:	f023 0302 	bic.w	r3, r3, #2
 8001954:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7e1b      	ldrb	r3, [r3, #24]
 800195a:	039a      	lsls	r2, r3, #14
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4313      	orrs	r3, r2
 8001966:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001968:	4313      	orrs	r3, r2
 800196a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <HAL_ADC_Init+0x3bc>)
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800197c:	430b      	orrs	r3, r1
 800197e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d10c      	bne.n	80019a2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f023 010f 	bic.w	r1, r3, #15
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	1e5a      	subs	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	631a      	str	r2, [r3, #48]	@ 0x30
 80019a0:	e007      	b.n	80019b2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 020f 	bic.w	r2, r2, #15
 80019b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f023 0303 	bic.w	r3, r3, #3
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80019c8:	e00a      	b.n	80019e0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f023 0312 	bic.w	r3, r3, #18
 80019d2:	f043 0210 	orr.w	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019da:	2301      	movs	r3, #1
 80019dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3768      	adds	r7, #104	@ 0x68
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	fff0c007 	.word	0xfff0c007

080019f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 80f7 	bne.w	8001bfe <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_Start_DMA+0x2e>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e0f2      	b.n	8001c04 <HAL_ADC_Start_DMA+0x214>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a2e:	d004      	beq.n	8001a3a <HAL_ADC_Start_DMA+0x4a>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a75      	ldr	r2, [pc, #468]	@ (8001c0c <HAL_ADC_Start_DMA+0x21c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d109      	bne.n	8001a4e <HAL_ADC_Start_DMA+0x5e>
 8001a3a:	4b75      	ldr	r3, [pc, #468]	@ (8001c10 <HAL_ADC_Start_DMA+0x220>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	e008      	b.n	8001a60 <HAL_ADC_Start_DMA+0x70>
 8001a4e:	4b71      	ldr	r3, [pc, #452]	@ (8001c14 <HAL_ADC_Start_DMA+0x224>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf0c      	ite	eq
 8001a5a:	2301      	moveq	r3, #1
 8001a5c:	2300      	movne	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80c5 	beq.w	8001bf0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fd20 	bl	80024ac <ADC_Enable>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 80b7 	bne.w	8001be6 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a94:	d004      	beq.n	8001aa0 <HAL_ADC_Start_DMA+0xb0>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c0c <HAL_ADC_Start_DMA+0x21c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d106      	bne.n	8001aae <HAL_ADC_Start_DMA+0xbe>
 8001aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c10 <HAL_ADC_Start_DMA+0x220>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d010      	beq.n	8001ace <HAL_ADC_Start_DMA+0xde>
 8001aac:	e005      	b.n	8001aba <HAL_ADC_Start_DMA+0xca>
 8001aae:	4b59      	ldr	r3, [pc, #356]	@ (8001c14 <HAL_ADC_Start_DMA+0x224>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_ADC_Start_DMA+0xde>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ac2:	d004      	beq.n	8001ace <HAL_ADC_Start_DMA+0xde>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a53      	ldr	r2, [pc, #332]	@ (8001c18 <HAL_ADC_Start_DMA+0x228>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d115      	bne.n	8001afa <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d036      	beq.n	8001b56 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001af0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001af8:	e02d      	b.n	8001b56 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b0e:	d004      	beq.n	8001b1a <HAL_ADC_Start_DMA+0x12a>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a3d      	ldr	r2, [pc, #244]	@ (8001c0c <HAL_ADC_Start_DMA+0x21c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10a      	bne.n	8001b30 <HAL_ADC_Start_DMA+0x140>
 8001b1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e008      	b.n	8001b42 <HAL_ADC_Start_DMA+0x152>
 8001b30:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <HAL_ADC_Start_DMA+0x228>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b4e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b62:	d106      	bne.n	8001b72 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b68:	f023 0206 	bic.w	r2, r3, #6
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b70:	e002      	b.n	8001b78 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b84:	4a25      	ldr	r2, [pc, #148]	@ (8001c1c <HAL_ADC_Start_DMA+0x22c>)
 8001b86:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8c:	4a24      	ldr	r2, [pc, #144]	@ (8001c20 <HAL_ADC_Start_DMA+0x230>)
 8001b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b94:	4a23      	ldr	r2, [pc, #140]	@ (8001c24 <HAL_ADC_Start_DMA+0x234>)
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	221c      	movs	r2, #28
 8001b9e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0210 	orr.w	r2, r2, #16
 8001bae:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3340      	adds	r3, #64	@ 0x40
 8001bca:	4619      	mov	r1, r3
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f001 f8a6 	bl	8002d20 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0204 	orr.w	r2, r2, #4
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	e00d      	b.n	8001c02 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001bee:	e008      	b.n	8001c02 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001bfc:	e001      	b.n	8001c02 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	50000100 	.word	0x50000100
 8001c10:	50000300 	.word	0x50000300
 8001c14:	50000700 	.word	0x50000700
 8001c18:	50000400 	.word	0x50000400
 8001c1c:	080023e1 	.word	0x080023e1
 8001c20:	0800245b 	.word	0x0800245b
 8001c24:	08002477 	.word	0x08002477

08001c28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b09b      	sub	sp, #108	@ 0x6c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x22>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e2c8      	b.n	80021dc <HAL_ADC_ConfigChannel+0x5b4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 82ac 	bne.w	80021ba <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d81c      	bhi.n	8001ca4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	231f      	movs	r3, #31
 8001c80:	4093      	lsls	r3, r2
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4019      	ands	r1, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ca2:	e063      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b09      	cmp	r3, #9
 8001caa:	d81e      	bhi.n	8001cea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	3b1e      	subs	r3, #30
 8001cc0:	221f      	movs	r2, #31
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	4019      	ands	r1, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	3b1e      	subs	r3, #30
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ce8:	e040      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b0e      	cmp	r3, #14
 8001cf0:	d81e      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	3b3c      	subs	r3, #60	@ 0x3c
 8001d06:	221f      	movs	r2, #31
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4019      	ands	r1, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	3b3c      	subs	r3, #60	@ 0x3c
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d2e:	e01d      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	3b5a      	subs	r3, #90	@ 0x5a
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	4019      	ands	r1, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	3b5a      	subs	r3, #90	@ 0x5a
 8001d60:	fa00 f203 	lsl.w	r2, r0, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 80e5 	bne.w	8001f46 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	d91c      	bls.n	8001dbe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6999      	ldr	r1, [r3, #24]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	3b1e      	subs	r3, #30
 8001d96:	2207      	movs	r2, #7
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4019      	ands	r1, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6898      	ldr	r0, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	3b1e      	subs	r3, #30
 8001db0:	fa00 f203 	lsl.w	r2, r0, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	619a      	str	r2, [r3, #24]
 8001dbc:	e019      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6959      	ldr	r1, [r3, #20]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	2207      	movs	r2, #7
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4019      	ands	r1, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6898      	ldr	r0, [r3, #8]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d84f      	bhi.n	8001eb4 <HAL_ADC_ConfigChannel+0x28c>
 8001e14:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <HAL_ADC_ConfigChannel+0x1f4>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e4f 	.word	0x08001e4f
 8001e24:	08001e71 	.word	0x08001e71
 8001e28:	08001e93 	.word	0x08001e93
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e32:	4b99      	ldr	r3, [pc, #612]	@ (8002098 <HAL_ADC_ConfigChannel+0x470>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	0691      	lsls	r1, r2, #26
 8001e3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e4a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e4c:	e07b      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e54:	4b90      	ldr	r3, [pc, #576]	@ (8002098 <HAL_ADC_ConfigChannel+0x470>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	0691      	lsls	r1, r2, #26
 8001e5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e60:	430a      	orrs	r2, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e6c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e6e:	e06a      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e76:	4b88      	ldr	r3, [pc, #544]	@ (8002098 <HAL_ADC_ConfigChannel+0x470>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	0691      	lsls	r1, r2, #26
 8001e80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e82:	430a      	orrs	r2, r1
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e8e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e90:	e059      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e98:	4b7f      	ldr	r3, [pc, #508]	@ (8002098 <HAL_ADC_ConfigChannel+0x470>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	0691      	lsls	r1, r2, #26
 8001ea2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001eb0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eb2:	e048      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	069b      	lsls	r3, r3, #26
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ed6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ede:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	069b      	lsls	r3, r3, #26
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001efa:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	069b      	lsls	r3, r3, #26
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d107      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f1e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	069b      	lsls	r3, r3, #26
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d107      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f42:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001f44:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d108      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x33e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x33e>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x340>
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 8131 	bne.w	80021d0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d00f      	beq.n	8001f96 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43da      	mvns	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	400a      	ands	r2, r1
 8001f90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001f94:	e049      	b.n	800202a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d91c      	bls.n	8001ff2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6999      	ldr	r1, [r3, #24]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b1b      	subs	r3, #27
 8001fca:	2207      	movs	r2, #7
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4019      	ands	r1, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6898      	ldr	r0, [r3, #8]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b1b      	subs	r3, #27
 8001fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	619a      	str	r2, [r3, #24]
 8001ff0:	e01b      	b.n	800202a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6959      	ldr	r1, [r3, #20]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	2207      	movs	r2, #7
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	4019      	ands	r1, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6898      	ldr	r0, [r3, #8]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	fa00 f203 	lsl.w	r2, r0, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002032:	d004      	beq.n	800203e <HAL_ADC_ConfigChannel+0x416>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a18      	ldr	r2, [pc, #96]	@ (800209c <HAL_ADC_ConfigChannel+0x474>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x41a>
 800203e:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <HAL_ADC_ConfigChannel+0x478>)
 8002040:	e000      	b.n	8002044 <HAL_ADC_ConfigChannel+0x41c>
 8002042:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <HAL_ADC_ConfigChannel+0x47c>)
 8002044:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b10      	cmp	r3, #16
 800204c:	d105      	bne.n	800205a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800204e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800205e:	2b11      	cmp	r3, #17
 8002060:	d105      	bne.n	800206e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002072:	2b12      	cmp	r3, #18
 8002074:	f040 80ac 	bne.w	80021d0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 80a5 	bne.w	80021d0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x480>
 8002090:	4b02      	ldr	r3, [pc, #8]	@ (800209c <HAL_ADC_ConfigChannel+0x474>)
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e023      	b.n	80020de <HAL_ADC_ConfigChannel+0x4b6>
 8002096:	bf00      	nop
 8002098:	83fff000 	.word	0x83fff000
 800209c:	50000100 	.word	0x50000100
 80020a0:	50000300 	.word	0x50000300
 80020a4:	50000700 	.word	0x50000700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a4e      	ldr	r2, [pc, #312]	@ (80021e8 <HAL_ADC_ConfigChannel+0x5c0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d103      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x492>
 80020b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e011      	b.n	80020de <HAL_ADC_ConfigChannel+0x4b6>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a4b      	ldr	r2, [pc, #300]	@ (80021ec <HAL_ADC_ConfigChannel+0x5c4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d102      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x4a2>
 80020c4:	4b4a      	ldr	r3, [pc, #296]	@ (80021f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	e009      	b.n	80020de <HAL_ADC_ConfigChannel+0x4b6>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a48      	ldr	r2, [pc, #288]	@ (80021f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d102      	bne.n	80020da <HAL_ADC_ConfigChannel+0x4b2>
 80020d4:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <HAL_ADC_ConfigChannel+0x5c4>)
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e001      	b.n	80020de <HAL_ADC_ConfigChannel+0x4b6>
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d108      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x4d6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x4d6>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_ADC_ConfigChannel+0x4d8>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d150      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002104:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	d010      	beq.n	800212c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x4fe>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x4fe>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_ADC_ConfigChannel+0x500>
 8002126:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002128:	2b00      	cmp	r3, #0
 800212a:	d13c      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b10      	cmp	r3, #16
 8002132:	d11d      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x548>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800213c:	d118      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800213e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002148:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800214a:	4b2a      	ldr	r3, [pc, #168]	@ (80021f4 <HAL_ADC_ConfigChannel+0x5cc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2a      	ldr	r2, [pc, #168]	@ (80021f8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	0c9a      	lsrs	r2, r3, #18
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002160:	e002      	b.n	8002168 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3b01      	subs	r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f9      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800216e:	e02e      	b.n	80021ce <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b11      	cmp	r3, #17
 8002176:	d10b      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x568>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002180:	d106      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800218a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800218c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800218e:	e01e      	b.n	80021ce <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b12      	cmp	r3, #18
 8002196:	d11a      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021a2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021a4:	e013      	b.n	80021ce <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f043 0220 	orr.w	r2, r3, #32
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021b8:	e00a      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021cc:	e000      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021ce:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80021dc:	4618      	mov	r0, r3
 80021de:	376c      	adds	r7, #108	@ 0x6c
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	50000100 	.word	0x50000100
 80021ec:	50000400 	.word	0x50000400
 80021f0:	50000500 	.word	0x50000500
 80021f4:	20000004 	.word	0x20000004
 80021f8:	431bde83 	.word	0x431bde83

080021fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b099      	sub	sp, #100	@ 0x64
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002214:	d102      	bne.n	800221c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002216:	4b6d      	ldr	r3, [pc, #436]	@ (80023cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	e01a      	b.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6a      	ldr	r2, [pc, #424]	@ (80023cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d103      	bne.n	800222e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002226:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	e011      	b.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a67      	ldr	r2, [pc, #412]	@ (80023d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d102      	bne.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002238:	4b66      	ldr	r3, [pc, #408]	@ (80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	e009      	b.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a64      	ldr	r2, [pc, #400]	@ (80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d102      	bne.n	800224e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002248:	4b61      	ldr	r3, [pc, #388]	@ (80023d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	e001      	b.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0b0      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002266:	2302      	movs	r3, #2
 8002268:	e0a9      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 808d 	bne.w	800239c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 8086 	bne.w	800239c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002298:	d004      	beq.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a4b      	ldr	r2, [pc, #300]	@ (80023cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80022a4:	4b4c      	ldr	r3, [pc, #304]	@ (80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80022a6:	e000      	b.n	80022aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80022a8:	4b4c      	ldr	r3, [pc, #304]	@ (80023dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80022aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d040      	beq.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022c6:	035b      	lsls	r3, r3, #13
 80022c8:	430b      	orrs	r3, r1
 80022ca:	431a      	orrs	r2, r3
 80022cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022ce:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d15c      	bne.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d107      	bne.n	8002312 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002312:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d14b      	bne.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002320:	f023 030f 	bic.w	r3, r3, #15
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	6811      	ldr	r1, [r2, #0]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	6892      	ldr	r2, [r2, #8]
 800232c:	430a      	orrs	r2, r1
 800232e:	431a      	orrs	r2, r3
 8002330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002332:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002334:	e03c      	b.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800233e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002340:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d123      	bne.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d107      	bne.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002384:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d112      	bne.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800238a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002392:	f023 030f 	bic.w	r3, r3, #15
 8002396:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002398:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800239a:	e009      	b.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80023ae:	e000      	b.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023b0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80023be:	4618      	mov	r0, r3
 80023c0:	3764      	adds	r7, #100	@ 0x64
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	50000100 	.word	0x50000100
 80023d0:	50000400 	.word	0x50000400
 80023d4:	50000500 	.word	0x50000500
 80023d8:	50000300 	.word	0x50000300
 80023dc:	50000700 	.word	0x50000700

080023e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d126      	bne.n	8002448 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002410:	2b00      	cmp	r3, #0
 8002412:	d115      	bne.n	8002440 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002418:	2b00      	cmp	r3, #0
 800241a:	d111      	bne.n	8002440 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff f8d7 	bl	80015f4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002446:	e004      	b.n	8002452 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4798      	blx	r3
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f7ff f8cd 	bl	8001608 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002494:	f043 0204 	orr.w	r2, r3, #4
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff f8bd 	bl	800161c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d108      	bne.n	80024d8 <ADC_Enable+0x2c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <ADC_Enable+0x2c>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <ADC_Enable+0x2e>
 80024d8:	2300      	movs	r3, #0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d143      	bne.n	8002566 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b22      	ldr	r3, [pc, #136]	@ (8002570 <ADC_Enable+0xc4>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00d      	beq.n	8002508 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	f043 0210 	orr.w	r2, r3, #16
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e02f      	b.n	8002568 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002518:	f7ff f860 	bl	80015dc <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800251e:	e01b      	b.n	8002558 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002520:	f7ff f85c 	bl	80015dc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d914      	bls.n	8002558 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d00d      	beq.n	8002558 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	f043 0210 	orr.w	r2, r3, #16
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e007      	b.n	8002568 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d1dc      	bne.n	8002520 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	8000003f 	.word	0x8000003f

08002574 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <ADC_Disable+0x2c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <ADC_Disable+0x2c>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <ADC_Disable+0x2e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d047      	beq.n	8002636 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030d 	and.w	r3, r3, #13
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d10f      	bne.n	80025d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0202 	orr.w	r2, r2, #2
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2203      	movs	r2, #3
 80025ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80025cc:	f7ff f806 	bl	80015dc <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025d2:	e029      	b.n	8002628 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	f043 0210 	orr.w	r2, r3, #16
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e023      	b.n	8002638 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025f0:	f7fe fff4 	bl	80015dc <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d914      	bls.n	8002628 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10d      	bne.n	8002628 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	f043 0210 	orr.w	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e007      	b.n	8002638 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d0dc      	beq.n	80025f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_COMP_Init+0x26>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_COMP_Init+0x2c>
  {
    status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	77fb      	strb	r3, [r7, #31]
 800266a:	e088      	b.n	800277e <HAL_COMP_Init+0x13e>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266c:	4b46      	ldr	r3, [pc, #280]	@ (8002788 <HAL_COMP_Init+0x148>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a45      	ldr	r2, [pc, #276]	@ (8002788 <HAL_COMP_Init+0x148>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b43      	ldr	r3, [pc, #268]	@ (8002788 <HAL_COMP_Init+0x148>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7fe fcef 	bl	8001068 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002694:	61bb      	str	r3, [r7, #24]

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0282 	bic.w	r2, r3, #130	@ 0x82
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f023 020c 	bic.w	r2, r3, #12
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0)) != 0UL) &&
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002744:	2b00      	cmp	r3, #0
 8002746:	d016      	beq.n	8002776 <HAL_COMP_Init+0x136>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d113      	bne.n	8002776 <HAL_COMP_Init+0x136>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800274e:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <HAL_COMP_Init+0x14c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	4a0e      	ldr	r2, [pc, #56]	@ (8002790 <HAL_COMP_Init+0x150>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002768:	e002      	b.n	8002770 <HAL_COMP_Init+0x130>
      {
        wait_loop_index--;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3b01      	subs	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f9      	bne.n	800276a <HAL_COMP_Init+0x12a>
      }
    }

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  return status;
 800277e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	20000004 	.word	0x20000004
 8002790:	053e2d63 	.word	0x053e2d63

08002794 <HAL_COMP_Start_IT>:
  * @brief  Start the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_COMP_Start_IT+0x26>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_COMP_Start_IT+0x2c>
  {
    status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e0c8      	b.n	8002952 <HAL_COMP_Start_IT+0x1be>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 80c0 	bne.w	800294e <HAL_COMP_Start_IT+0x1ba>
    {
      /* Configure the EXTI event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_IT_RISING | COMP_TRIGGERMODE_IT_FALLING)) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80b6 	beq.w	8002948 <HAL_COMP_Start_IT+0x1b4>
      {
        /* Get the EXTI Line output configuration */
        extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5f      	ldr	r2, [pc, #380]	@ (8002960 <HAL_COMP_Start_IT+0x1cc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d028      	beq.n	8002838 <HAL_COMP_Start_IT+0xa4>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002964 <HAL_COMP_Start_IT+0x1d0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d020      	beq.n	8002832 <HAL_COMP_Start_IT+0x9e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5c      	ldr	r2, [pc, #368]	@ (8002968 <HAL_COMP_Start_IT+0x1d4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d018      	beq.n	800282c <HAL_COMP_Start_IT+0x98>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5b      	ldr	r2, [pc, #364]	@ (800296c <HAL_COMP_Start_IT+0x1d8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d010      	beq.n	8002826 <HAL_COMP_Start_IT+0x92>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a59      	ldr	r2, [pc, #356]	@ (8002970 <HAL_COMP_Start_IT+0x1dc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d008      	beq.n	8002820 <HAL_COMP_Start_IT+0x8c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a58      	ldr	r2, [pc, #352]	@ (8002974 <HAL_COMP_Start_IT+0x1e0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d101      	bne.n	800281c <HAL_COMP_Start_IT+0x88>
 8002818:	2301      	movs	r3, #1
 800281a:	e00f      	b.n	800283c <HAL_COMP_Start_IT+0xa8>
 800281c:	2302      	movs	r3, #2
 800281e:	e00d      	b.n	800283c <HAL_COMP_Start_IT+0xa8>
 8002820:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002824:	e00a      	b.n	800283c <HAL_COMP_Start_IT+0xa8>
 8002826:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800282a:	e007      	b.n	800283c <HAL_COMP_Start_IT+0xa8>
 800282c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002830:	e004      	b.n	800283c <HAL_COMP_Start_IT+0xa8>
 8002832:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002836:	e001      	b.n	800283c <HAL_COMP_Start_IT+0xa8>
 8002838:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800283c:	60bb      	str	r3, [r7, #8]

        /* Configure the trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d012      	beq.n	8002870 <HAL_COMP_Start_IT+0xdc>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <HAL_COMP_Start_IT+0xce>
 8002854:	4b48      	ldr	r3, [pc, #288]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 8002856:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002858:	4947      	ldr	r1, [pc, #284]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002860:	e01a      	b.n	8002898 <HAL_COMP_Start_IT+0x104>
 8002862:	4b45      	ldr	r3, [pc, #276]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	4944      	ldr	r1, [pc, #272]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
 800286e:	e013      	b.n	8002898 <HAL_COMP_Start_IT+0x104>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <HAL_COMP_Start_IT+0xf6>
 800287a:	4b3f      	ldr	r3, [pc, #252]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 800287c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	43db      	mvns	r3, r3
 8002882:	493d      	ldr	r1, [pc, #244]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 8002884:	4013      	ands	r3, r2
 8002886:	628b      	str	r3, [r1, #40]	@ 0x28
 8002888:	e006      	b.n	8002898 <HAL_COMP_Start_IT+0x104>
 800288a:	4b3b      	ldr	r3, [pc, #236]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	43db      	mvns	r3, r3
 8002892:	4939      	ldr	r1, [pc, #228]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 8002894:	4013      	ands	r3, r2
 8002896:	608b      	str	r3, [r1, #8]
        }
        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d012      	beq.n	80028ca <HAL_COMP_Start_IT+0x136>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <HAL_COMP_Start_IT+0x128>
 80028ae:	4b32      	ldr	r3, [pc, #200]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 80028b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b2:	4931      	ldr	r1, [pc, #196]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80028ba:	e01a      	b.n	80028f2 <HAL_COMP_Start_IT+0x15e>
 80028bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	492d      	ldr	r1, [pc, #180]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60cb      	str	r3, [r1, #12]
 80028c8:	e013      	b.n	80028f2 <HAL_COMP_Start_IT+0x15e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_COMP_Start_IT+0x150>
 80028d4:	4b28      	ldr	r3, [pc, #160]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 80028d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	43db      	mvns	r3, r3
 80028dc:	4926      	ldr	r1, [pc, #152]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 80028de:	4013      	ands	r3, r2
 80028e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80028e2:	e006      	b.n	80028f2 <HAL_COMP_Start_IT+0x15e>
 80028e4:	4b24      	ldr	r3, [pc, #144]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4922      	ldr	r1, [pc, #136]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
        }

        /* Clear COMP EXTI pending bit if any */
        COMP_EXTI_CLEAR_FLAG(extiline);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_COMP_Start_IT+0x170>
 80028fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	6353      	str	r3, [r2, #52]	@ 0x34
 8002902:	e002      	b.n	800290a <HAL_COMP_Start_IT+0x176>
 8002904:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	6153      	str	r3, [r2, #20]

        /* Enable EXTI interrupt mode */
        COMP_EXTI_ENABLE_IT(extiline);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <HAL_COMP_Start_IT+0x18e>
 8002914:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	4917      	ldr	r1, [pc, #92]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4313      	orrs	r3, r2
 800291e:	620b      	str	r3, [r1, #32]
 8002920:	e005      	b.n	800292e <HAL_COMP_Start_IT+0x19a>
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4914      	ldr	r1, [pc, #80]	@ (8002978 <HAL_COMP_Start_IT+0x1e4>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

        /* Enable the selected comparator */
        __HAL_COMP_ENABLE(hcomp);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        hcomp->State = HAL_COMP_STATE_BUSY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002946:	e004      	b.n	8002952 <HAL_COMP_Start_IT+0x1be>
      }
      else
      {
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e001      	b.n	8002952 <HAL_COMP_Start_IT+0x1be>
      }
    }
    else
    {
      status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	4001001c 	.word	0x4001001c
 8002964:	40010020 	.word	0x40010020
 8002968:	40010024 	.word	0x40010024
 800296c:	40010028 	.word	0x40010028
 8002970:	4001002c 	.word	0x4001002c
 8002974:	40010030 	.word	0x40010030
 8002978:	40010400 	.word	0x40010400

0800297c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2d      	ldr	r2, [pc, #180]	@ (8002a40 <HAL_COMP_IRQHandler+0xc4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d028      	beq.n	80029e0 <HAL_COMP_IRQHandler+0x64>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2c      	ldr	r2, [pc, #176]	@ (8002a44 <HAL_COMP_IRQHandler+0xc8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d020      	beq.n	80029da <HAL_COMP_IRQHandler+0x5e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2a      	ldr	r2, [pc, #168]	@ (8002a48 <HAL_COMP_IRQHandler+0xcc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d018      	beq.n	80029d4 <HAL_COMP_IRQHandler+0x58>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <HAL_COMP_IRQHandler+0xd0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d010      	beq.n	80029ce <HAL_COMP_IRQHandler+0x52>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a27      	ldr	r2, [pc, #156]	@ (8002a50 <HAL_COMP_IRQHandler+0xd4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d008      	beq.n	80029c8 <HAL_COMP_IRQHandler+0x4c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a26      	ldr	r2, [pc, #152]	@ (8002a54 <HAL_COMP_IRQHandler+0xd8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_COMP_IRQHandler+0x48>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e00f      	b.n	80029e4 <HAL_COMP_IRQHandler+0x68>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e00d      	b.n	80029e4 <HAL_COMP_IRQHandler+0x68>
 80029c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029cc:	e00a      	b.n	80029e4 <HAL_COMP_IRQHandler+0x68>
 80029ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029d2:	e007      	b.n	80029e4 <HAL_COMP_IRQHandler+0x68>
 80029d4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80029d8:	e004      	b.n	80029e4 <HAL_COMP_IRQHandler+0x68>
 80029da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029de:	e001      	b.n	80029e4 <HAL_COMP_IRQHandler+0x68>
 80029e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if (COMP_EXTI_GET_FLAG(extiline) != RESET)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_COMP_IRQHandler+0x88>
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_COMP_IRQHandler+0xdc>)
 80029f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e008      	b.n	8002a16 <HAL_COMP_IRQHandler+0x9a>
 8002a04:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_COMP_IRQHandler+0xdc>)
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00e      	beq.n	8002a38 <HAL_COMP_IRQHandler+0xbc>
  {
    /* Clear COMP EXTI pending bit */
    COMP_EXTI_CLEAR_FLAG(extiline);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_COMP_IRQHandler+0xb0>
 8002a24:	4a0c      	ldr	r2, [pc, #48]	@ (8002a58 <HAL_COMP_IRQHandler+0xdc>)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a2a:	e002      	b.n	8002a32 <HAL_COMP_IRQHandler+0xb6>
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <HAL_COMP_IRQHandler+0xdc>)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6153      	str	r3, [r2, #20]

    /* COMP trigger callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f812 	bl	8002a5c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	4001001c 	.word	0x4001001c
 8002a44:	40010020 	.word	0x40010020
 8002a48:	40010024 	.word	0x40010024
 8002a4c:	40010028 	.word	0x40010028
 8002a50:	4001002c 	.word	0x4001002c
 8002a54:	40010030 	.word	0x40010030
 8002a58:	40010400 	.word	0x40010400

08002a5c <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4907      	ldr	r1, [pc, #28]	@ (8002b0c <__NVIC_EnableIRQ+0x38>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	@ (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	@ (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	@ 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	@ 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bdc:	d301      	bcc.n	8002be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00f      	b.n	8002c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <SysTick_Config+0x40>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bea:	210f      	movs	r1, #15
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f7ff ff8e 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <SysTick_Config+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfa:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <SysTick_Config+0x40>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff29 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff3e 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff8e 	bl	8002b64 <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5d 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff31 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ffa2 	bl	8002bcc <SysTick_Config>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e037      	b.n	8002d18 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002cbe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002cc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f940 	bl	8002f80 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_DMA_Start_IT+0x20>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e04a      	b.n	8002dd6 <HAL_DMA_Start_IT+0xb6>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d13a      	bne.n	8002dc8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f8d4 	bl	8002f24 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 020e 	orr.w	r2, r2, #14
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e00f      	b.n	8002db6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 020a 	orr.w	r2, r2, #10
 8002da4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0204 	bic.w	r2, r2, #4
 8002db4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e005      	b.n	8002dd4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d024      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x72>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01f      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d107      	bne.n	8002e2e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0204 	bic.w	r2, r2, #4
 8002e2c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e36:	2104      	movs	r1, #4
 8002e38:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d06a      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e4e:	e065      	b.n	8002f1c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	2202      	movs	r2, #2
 8002e56:	409a      	lsls	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02c      	beq.n	8002eba <HAL_DMA_IRQHandler+0xdc>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d027      	beq.n	8002eba <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 020a 	bic.w	r2, r2, #10
 8002e86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e98:	2102      	movs	r1, #2
 8002e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d035      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002eb8:	e030      	b.n	8002f1c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d028      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x13e>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 020e 	bic.w	r2, r2, #14
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
    }
  }
}
 8002f1a:	e7ff      	b.n	8002f1c <HAL_DMA_IRQHandler+0x13e>
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d108      	bne.n	8002f64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f62:	e007      	b.n	8002f74 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	60da      	str	r2, [r3, #12]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <DMA_CalcBaseAndBitshift+0x60>)
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d80f      	bhi.n	8002fb4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f9c:	4413      	add	r3, r2
 8002f9e:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <DMA_CalcBaseAndBitshift+0x68>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	009a      	lsls	r2, r3, #2
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0f      	ldr	r2, [pc, #60]	@ (8002fec <DMA_CalcBaseAndBitshift+0x6c>)
 8002fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002fb2:	e00e      	b.n	8002fd2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <DMA_CalcBaseAndBitshift+0x70>)
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <DMA_CalcBaseAndBitshift+0x68>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	009a      	lsls	r2, r3, #2
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a09      	ldr	r2, [pc, #36]	@ (8002ff4 <DMA_CalcBaseAndBitshift+0x74>)
 8002fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40020407 	.word	0x40020407
 8002fe4:	bffdfff8 	.word	0xbffdfff8
 8002fe8:	cccccccd 	.word	0xcccccccd
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	bffdfbf8 	.word	0xbffdfbf8
 8002ff4:	40020400 	.word	0x40020400

08002ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003006:	e154      	b.n	80032b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8146 	beq.w	80032ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d005      	beq.n	8003038 <HAL_GPIO_Init+0x40>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d130      	bne.n	800309a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800306e:	2201      	movs	r2, #1
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 0201 	and.w	r2, r3, #1
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d017      	beq.n	80030d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d123      	bne.n	800312a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	08da      	lsrs	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3208      	adds	r2, #8
 80030ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	220f      	movs	r2, #15
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	08da      	lsrs	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3208      	adds	r2, #8
 8003124:	6939      	ldr	r1, [r7, #16]
 8003126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2203      	movs	r2, #3
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0203 	and.w	r2, r3, #3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80a0 	beq.w	80032ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316c:	4b58      	ldr	r3, [pc, #352]	@ (80032d0 <HAL_GPIO_Init+0x2d8>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	4a57      	ldr	r2, [pc, #348]	@ (80032d0 <HAL_GPIO_Init+0x2d8>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6193      	str	r3, [r2, #24]
 8003178:	4b55      	ldr	r3, [pc, #340]	@ (80032d0 <HAL_GPIO_Init+0x2d8>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003184:	4a53      	ldr	r2, [pc, #332]	@ (80032d4 <HAL_GPIO_Init+0x2dc>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031ae:	d019      	beq.n	80031e4 <HAL_GPIO_Init+0x1ec>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a49      	ldr	r2, [pc, #292]	@ (80032d8 <HAL_GPIO_Init+0x2e0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <HAL_GPIO_Init+0x1e8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a48      	ldr	r2, [pc, #288]	@ (80032dc <HAL_GPIO_Init+0x2e4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00d      	beq.n	80031dc <HAL_GPIO_Init+0x1e4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a47      	ldr	r2, [pc, #284]	@ (80032e0 <HAL_GPIO_Init+0x2e8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d007      	beq.n	80031d8 <HAL_GPIO_Init+0x1e0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a46      	ldr	r2, [pc, #280]	@ (80032e4 <HAL_GPIO_Init+0x2ec>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d101      	bne.n	80031d4 <HAL_GPIO_Init+0x1dc>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e008      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031d4:	2305      	movs	r3, #5
 80031d6:	e006      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031d8:	2303      	movs	r3, #3
 80031da:	e004      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031dc:	2302      	movs	r3, #2
 80031de:	e002      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031e4:	2300      	movs	r3, #0
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	f002 0203 	and.w	r2, r2, #3
 80031ec:	0092      	lsls	r2, r2, #2
 80031ee:	4093      	lsls	r3, r2
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031f6:	4937      	ldr	r1, [pc, #220]	@ (80032d4 <HAL_GPIO_Init+0x2dc>)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003204:	4b38      	ldr	r3, [pc, #224]	@ (80032e8 <HAL_GPIO_Init+0x2f0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	43db      	mvns	r3, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003228:	4a2f      	ldr	r2, [pc, #188]	@ (80032e8 <HAL_GPIO_Init+0x2f0>)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800322e:	4b2e      	ldr	r3, [pc, #184]	@ (80032e8 <HAL_GPIO_Init+0x2f0>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003252:	4a25      	ldr	r2, [pc, #148]	@ (80032e8 <HAL_GPIO_Init+0x2f0>)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003258:	4b23      	ldr	r3, [pc, #140]	@ (80032e8 <HAL_GPIO_Init+0x2f0>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43db      	mvns	r3, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800327c:	4a1a      	ldr	r2, [pc, #104]	@ (80032e8 <HAL_GPIO_Init+0x2f0>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003282:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_GPIO_Init+0x2f0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	43db      	mvns	r3, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032a6:	4a10      	ldr	r2, [pc, #64]	@ (80032e8 <HAL_GPIO_Init+0x2f0>)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3301      	adds	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f47f aea3 	bne.w	8003008 <HAL_GPIO_Init+0x10>
  }
}
 80032c2:	bf00      	nop
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40010000 	.word	0x40010000
 80032d8:	48000400 	.word	0x48000400
 80032dc:	48000800 	.word	0x48000800
 80032e0:	48000c00 	.word	0x48000c00
 80032e4:	48001000 	.word	0x48001000
 80032e8:	40010400 	.word	0x40010400

080032ec <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80032f0:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_PWR_PVD_IRQHandler+0x20>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80032fc:	f000 f808 	bl	8003310 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003300:	4b02      	ldr	r3, [pc, #8]	@ (800330c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003302:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003306:	615a      	str	r2, [r3, #20]
  }
}
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40010400 	.word	0x40010400

08003310 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003326:	af00      	add	r7, sp, #0
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003330:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f001 b823 	b.w	800438c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 817d 	beq.w	8003656 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800335c:	4bbc      	ldr	r3, [pc, #752]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b04      	cmp	r3, #4
 8003366:	d00c      	beq.n	8003382 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003368:	4bb9      	ldr	r3, [pc, #740]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b08      	cmp	r3, #8
 8003372:	d15c      	bne.n	800342e <HAL_RCC_OscConfig+0x10e>
 8003374:	4bb6      	ldr	r3, [pc, #728]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003380:	d155      	bne.n	800342e <HAL_RCC_OscConfig+0x10e>
 8003382:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003386:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003396:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d102      	bne.n	80033b4 <HAL_RCC_OscConfig+0x94>
 80033ae:	4ba8      	ldr	r3, [pc, #672]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	e015      	b.n	80033e0 <HAL_RCC_OscConfig+0xc0>
 80033b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033b8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80033c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033cc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80033d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80033dc:	4b9c      	ldr	r3, [pc, #624]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033e4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80033e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80033ec:	fa92 f2a2 	rbit	r2, r2
 80033f0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80033f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80033f8:	fab2 f282 	clz	r2, r2
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	f042 0220 	orr.w	r2, r2, #32
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	f002 021f 	and.w	r2, r2, #31
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f202 	lsl.w	r2, r1, r2
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 811f 	beq.w	8003654 <HAL_RCC_OscConfig+0x334>
 8003416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 8116 	bne.w	8003654 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f000 bfaf 	b.w	800438c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003432:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343e:	d106      	bne.n	800344e <HAL_RCC_OscConfig+0x12e>
 8003440:	4b83      	ldr	r3, [pc, #524]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a82      	ldr	r2, [pc, #520]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	e036      	b.n	80034bc <HAL_RCC_OscConfig+0x19c>
 800344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x158>
 800345e:	4b7c      	ldr	r3, [pc, #496]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7b      	ldr	r2, [pc, #492]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b79      	ldr	r3, [pc, #484]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a78      	ldr	r2, [pc, #480]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003470:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e021      	b.n	80034bc <HAL_RCC_OscConfig+0x19c>
 8003478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x184>
 800348a:	4b71      	ldr	r3, [pc, #452]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a70      	ldr	r2, [pc, #448]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b6e      	ldr	r3, [pc, #440]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6d      	ldr	r2, [pc, #436]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e00b      	b.n	80034bc <HAL_RCC_OscConfig+0x19c>
 80034a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a69      	ldr	r2, [pc, #420]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b67      	ldr	r3, [pc, #412]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a66      	ldr	r2, [pc, #408]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 80034b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034bc:	4b64      	ldr	r3, [pc, #400]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	f023 020f 	bic.w	r2, r3, #15
 80034c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	495f      	ldr	r1, [pc, #380]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d059      	beq.n	800359a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe f879 	bl	80015dc <HAL_GetTick>
 80034ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe f874 	bl	80015dc <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b64      	cmp	r3, #100	@ 0x64
 80034fe:	d902      	bls.n	8003506 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	f000 bf43 	b.w	800438c <HAL_RCC_OscConfig+0x106c>
 8003506:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800350a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800351a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d102      	bne.n	8003538 <HAL_RCC_OscConfig+0x218>
 8003532:	4b47      	ldr	r3, [pc, #284]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	e015      	b.n	8003564 <HAL_RCC_OscConfig+0x244>
 8003538:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800353c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800354c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003550:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003554:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003560:	4b3b      	ldr	r3, [pc, #236]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003568:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800356c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003570:	fa92 f2a2 	rbit	r2, r2
 8003574:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003578:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800357c:	fab2 f282 	clz	r2, r2
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	f042 0220 	orr.w	r2, r2, #32
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f002 021f 	and.w	r2, r2, #31
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ab      	beq.n	80034f0 <HAL_RCC_OscConfig+0x1d0>
 8003598:	e05d      	b.n	8003656 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe f81f 	bl	80015dc <HAL_GetTick>
 800359e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe f81a 	bl	80015dc <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b64      	cmp	r3, #100	@ 0x64
 80035b2:	d902      	bls.n	80035ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	f000 bee9 	b.w	800438c <HAL_RCC_OscConfig+0x106c>
 80035ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035be:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80035ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d102      	bne.n	80035ec <HAL_RCC_OscConfig+0x2cc>
 80035e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	e015      	b.n	8003618 <HAL_RCC_OscConfig+0x2f8>
 80035ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035f0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003600:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003604:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003608:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003614:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <HAL_RCC_OscConfig+0x330>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800361c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003620:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003624:	fa92 f2a2 	rbit	r2, r2
 8003628:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800362c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003630:	fab2 f282 	clz	r2, r2
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	f042 0220 	orr.w	r2, r2, #32
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	f002 021f 	and.w	r2, r2, #31
 8003640:	2101      	movs	r1, #1
 8003642:	fa01 f202 	lsl.w	r2, r1, r2
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ab      	bne.n	80035a4 <HAL_RCC_OscConfig+0x284>
 800364c:	e003      	b.n	8003656 <HAL_RCC_OscConfig+0x336>
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 817d 	beq.w	8003966 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800366c:	4ba6      	ldr	r3, [pc, #664]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003678:	4ba3      	ldr	r3, [pc, #652]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b08      	cmp	r3, #8
 8003682:	d172      	bne.n	800376a <HAL_RCC_OscConfig+0x44a>
 8003684:	4ba0      	ldr	r3, [pc, #640]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d16c      	bne.n	800376a <HAL_RCC_OscConfig+0x44a>
 8003690:	2302      	movs	r3, #2
 8003692:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80036a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d102      	bne.n	80036c0 <HAL_RCC_OscConfig+0x3a0>
 80036ba:	4b93      	ldr	r3, [pc, #588]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e013      	b.n	80036e8 <HAL_RCC_OscConfig+0x3c8>
 80036c0:	2302      	movs	r3, #2
 80036c2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80036d2:	2302      	movs	r3, #2
 80036d4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80036d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80036e4:	4b88      	ldr	r3, [pc, #544]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	2202      	movs	r2, #2
 80036ea:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80036ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80036f2:	fa92 f2a2 	rbit	r2, r2
 80036f6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80036fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80036fe:	fab2 f282 	clz	r2, r2
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f042 0220 	orr.w	r2, r2, #32
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	f002 021f 	and.w	r2, r2, #31
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f202 	lsl.w	r2, r1, r2
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCC_OscConfig+0x410>
 800371a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d002      	beq.n	8003730 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f000 be2e 	b.w	800438c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003730:	4b75      	ldr	r3, [pc, #468]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	21f8      	movs	r1, #248	@ 0xf8
 8003746:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800374e:	fa91 f1a1 	rbit	r1, r1
 8003752:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003756:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800375a:	fab1 f181 	clz	r1, r1
 800375e:	b2c9      	uxtb	r1, r1
 8003760:	408b      	lsls	r3, r1
 8003762:	4969      	ldr	r1, [pc, #420]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003768:	e0fd      	b.n	8003966 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800376a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8088 	beq.w	800388c <HAL_RCC_OscConfig+0x56c>
 800377c:	2301      	movs	r3, #1
 800377e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800378e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800379c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	461a      	mov	r2, r3
 80037a4:	2301      	movs	r3, #1
 80037a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fd ff18 	bl	80015dc <HAL_GetTick>
 80037ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b2:	f7fd ff13 	bl	80015dc <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d902      	bls.n	80037c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	f000 bde2 	b.w	800438c <HAL_RCC_OscConfig+0x106c>
 80037c8:	2302      	movs	r3, #2
 80037ca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80037da:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	fab3 f383 	clz	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d102      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4d8>
 80037f2:	4b45      	ldr	r3, [pc, #276]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	e013      	b.n	8003820 <HAL_RCC_OscConfig+0x500>
 80037f8:	2302      	movs	r3, #2
 80037fa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800380a:	2302      	movs	r3, #2
 800380c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003810:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800381c:	4b3a      	ldr	r3, [pc, #232]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	2202      	movs	r2, #2
 8003822:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003826:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800382a:	fa92 f2a2 	rbit	r2, r2
 800382e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003832:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003836:	fab2 f282 	clz	r2, r2
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	f042 0220 	orr.w	r2, r2, #32
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f002 021f 	and.w	r2, r2, #31
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0af      	beq.n	80037b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b2d      	ldr	r3, [pc, #180]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800385a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	21f8      	movs	r1, #248	@ 0xf8
 8003868:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003870:	fa91 f1a1 	rbit	r1, r1
 8003874:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003878:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800387c:	fab1 f181 	clz	r1, r1
 8003880:	b2c9      	uxtb	r1, r1
 8003882:	408b      	lsls	r3, r1
 8003884:	4920      	ldr	r1, [pc, #128]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
 800388a:	e06c      	b.n	8003966 <HAL_RCC_OscConfig+0x646>
 800388c:	2301      	movs	r3, #1
 800388e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800389e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	461a      	mov	r2, r3
 80038b4:	2300      	movs	r3, #0
 80038b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fd fe90 	bl	80015dc <HAL_GetTick>
 80038bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c2:	f7fd fe8b 	bl	80015dc <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d902      	bls.n	80038d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	f000 bd5a 	b.w	800438c <HAL_RCC_OscConfig+0x106c>
 80038d8:	2302      	movs	r3, #2
 80038da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80038ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d104      	bne.n	800390c <HAL_RCC_OscConfig+0x5ec>
 8003902:	4b01      	ldr	r3, [pc, #4]	@ (8003908 <HAL_RCC_OscConfig+0x5e8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e015      	b.n	8003934 <HAL_RCC_OscConfig+0x614>
 8003908:	40021000 	.word	0x40021000
 800390c:	2302      	movs	r3, #2
 800390e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800391e:	2302      	movs	r3, #2
 8003920:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003924:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003930:	4bc8      	ldr	r3, [pc, #800]	@ (8003c54 <HAL_RCC_OscConfig+0x934>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	2202      	movs	r2, #2
 8003936:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800393a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003946:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800394a:	fab2 f282 	clz	r2, r2
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	f042 0220 	orr.w	r2, r2, #32
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	f002 021f 	and.w	r2, r2, #31
 800395a:	2101      	movs	r1, #1
 800395c:	fa01 f202 	lsl.w	r2, r1, r2
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ad      	bne.n	80038c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8110 	beq.w	8003b9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800397c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003980:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d079      	beq.n	8003a80 <HAL_RCC_OscConfig+0x760>
 800398c:	2301      	movs	r3, #1
 800398e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800399e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	4bab      	ldr	r3, [pc, #684]	@ (8003c58 <HAL_RCC_OscConfig+0x938>)
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	461a      	mov	r2, r3
 80039b2:	2301      	movs	r3, #1
 80039b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fd fe11 	bl	80015dc <HAL_GetTick>
 80039ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fd fe0c 	bl	80015dc <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d902      	bls.n	80039d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	f000 bcdb 	b.w	800438c <HAL_RCC_OscConfig+0x106c>
 80039d6:	2302      	movs	r3, #2
 80039d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80039e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80039f0:	2202      	movs	r2, #2
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	fa93 f2a3 	rbit	r2, r3
 8003a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a14:	2202      	movs	r2, #2
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	fa93 f2a3 	rbit	r2, r3
 8003a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003a2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a30:	4b88      	ldr	r3, [pc, #544]	@ (8003c54 <HAL_RCC_OscConfig+0x934>)
 8003a32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	6019      	str	r1, [r3, #0]
 8003a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	fa93 f1a3 	rbit	r1, r3
 8003a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003a56:	6019      	str	r1, [r3, #0]
  return result;
 8003a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2101      	movs	r1, #1
 8003a74:	fa01 f303 	lsl.w	r3, r1, r3
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0a0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x6a0>
 8003a7e:	e08d      	b.n	8003b9c <HAL_RCC_OscConfig+0x87c>
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a90:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	fa93 f2a3 	rbit	r2, r3
 8003a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003aa2:	601a      	str	r2, [r3, #0]
  return result;
 8003aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003aac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b68      	ldr	r3, [pc, #416]	@ (8003c58 <HAL_RCC_OscConfig+0x938>)
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	461a      	mov	r2, r3
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac2:	f7fd fd8b 	bl	80015dc <HAL_GetTick>
 8003ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fd fd86 	bl	80015dc <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d902      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	f000 bc55 	b.w	800438c <HAL_RCC_OscConfig+0x106c>
 8003ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003aea:	2202      	movs	r2, #2
 8003aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	fa93 f2a3 	rbit	r2, r3
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003b0e:	2202      	movs	r2, #2
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b16:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	fa93 f2a3 	rbit	r2, r3
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003b32:	2202      	movs	r2, #2
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	fa93 f2a3 	rbit	r2, r3
 8003b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003b4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4e:	4b41      	ldr	r3, [pc, #260]	@ (8003c54 <HAL_RCC_OscConfig+0x934>)
 8003b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	6019      	str	r1, [r3, #0]
 8003b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b62:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	fa93 f1a3 	rbit	r1, r3
 8003b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003b74:	6019      	str	r1, [r3, #0]
  return result;
 8003b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d197      	bne.n	8003acc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 81a1 	beq.w	8003ef4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb8:	4b26      	ldr	r3, [pc, #152]	@ (8003c54 <HAL_RCC_OscConfig+0x934>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d116      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b23      	ldr	r3, [pc, #140]	@ (8003c54 <HAL_RCC_OscConfig+0x934>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	4a22      	ldr	r2, [pc, #136]	@ (8003c54 <HAL_RCC_OscConfig+0x934>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	61d3      	str	r3, [r2, #28]
 8003bd0:	4b20      	ldr	r3, [pc, #128]	@ (8003c54 <HAL_RCC_OscConfig+0x934>)
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bdc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003bea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c5c <HAL_RCC_OscConfig+0x93c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d11a      	bne.n	8003c34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfe:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <HAL_RCC_OscConfig+0x93c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a16      	ldr	r2, [pc, #88]	@ (8003c5c <HAL_RCC_OscConfig+0x93c>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fce7 	bl	80015dc <HAL_GetTick>
 8003c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c12:	e009      	b.n	8003c28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c14:	f7fd fce2 	bl	80015dc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b64      	cmp	r3, #100	@ 0x64
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e3b1      	b.n	800438c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <HAL_RCC_OscConfig+0x93c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ef      	beq.n	8003c14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d10d      	bne.n	8003c60 <HAL_RCC_OscConfig+0x940>
 8003c44:	4b03      	ldr	r3, [pc, #12]	@ (8003c54 <HAL_RCC_OscConfig+0x934>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a02      	ldr	r2, [pc, #8]	@ (8003c54 <HAL_RCC_OscConfig+0x934>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6213      	str	r3, [r2, #32]
 8003c50:	e03c      	b.n	8003ccc <HAL_RCC_OscConfig+0x9ac>
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	10908120 	.word	0x10908120
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10c      	bne.n	8003c8a <HAL_RCC_OscConfig+0x96a>
 8003c70:	4bc1      	ldr	r3, [pc, #772]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	4ac0      	ldr	r2, [pc, #768]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6213      	str	r3, [r2, #32]
 8003c7c:	4bbe      	ldr	r3, [pc, #760]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	4abd      	ldr	r2, [pc, #756]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003c82:	f023 0304 	bic.w	r3, r3, #4
 8003c86:	6213      	str	r3, [r2, #32]
 8003c88:	e020      	b.n	8003ccc <HAL_RCC_OscConfig+0x9ac>
 8003c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x994>
 8003c9a:	4bb7      	ldr	r3, [pc, #732]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4ab6      	ldr	r2, [pc, #728]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	6213      	str	r3, [r2, #32]
 8003ca6:	4bb4      	ldr	r3, [pc, #720]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4ab3      	ldr	r2, [pc, #716]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6213      	str	r3, [r2, #32]
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0x9ac>
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	4aaf      	ldr	r2, [pc, #700]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	6213      	str	r3, [r2, #32]
 8003cc0:	4bad      	ldr	r3, [pc, #692]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4aac      	ldr	r2, [pc, #688]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003cc6:	f023 0304 	bic.w	r3, r3, #4
 8003cca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8081 	beq.w	8003de0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cde:	f7fd fc7d 	bl	80015dc <HAL_GetTick>
 8003ce2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fc78 	bl	80015dc <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e345      	b.n	800438c <HAL_RCC_OscConfig+0x106c>
 8003d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d04:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d08:	2202      	movs	r2, #2
 8003d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	fa93 f2a3 	rbit	r2, r3
 8003d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d28:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d34:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	fa93 f2a3 	rbit	r2, r3
 8003d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d42:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003d46:	601a      	str	r2, [r3, #0]
  return result;
 8003d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003d50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d102      	bne.n	8003d6c <HAL_RCC_OscConfig+0xa4c>
 8003d66:	4b84      	ldr	r3, [pc, #528]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	e013      	b.n	8003d94 <HAL_RCC_OscConfig+0xa74>
 8003d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d70:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003d74:	2202      	movs	r2, #2
 8003d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	fa93 f2a3 	rbit	r2, r3
 8003d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	4b79      	ldr	r3, [pc, #484]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d98:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	6011      	str	r1, [r2, #0]
 8003da0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003da4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	fa92 f1a2 	rbit	r1, r2
 8003dae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003db2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003db6:	6011      	str	r1, [r2, #0]
  return result;
 8003db8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dbc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	fab2 f282 	clz	r2, r2
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	f002 021f 	and.w	r2, r2, #31
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d084      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x9c8>
 8003dde:	e07f      	b.n	8003ee0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7fd fbfc 	bl	80015dc <HAL_GetTick>
 8003de4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de8:	e00b      	b.n	8003e02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fd fbf7 	bl	80015dc <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e2c4      	b.n	800438c <HAL_RCC_OscConfig+0x106c>
 8003e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e06:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e12:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	fa93 f2a3 	rbit	r2, r3
 8003e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e20:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003e2e:	2202      	movs	r2, #2
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e36:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	fa93 f2a3 	rbit	r2, r3
 8003e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e44:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003e48:	601a      	str	r2, [r3, #0]
  return result;
 8003e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003e52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f043 0302 	orr.w	r3, r3, #2
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d102      	bne.n	8003e6e <HAL_RCC_OscConfig+0xb4e>
 8003e68:	4b43      	ldr	r3, [pc, #268]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	e013      	b.n	8003e96 <HAL_RCC_OscConfig+0xb76>
 8003e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e72:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003e76:	2202      	movs	r2, #2
 8003e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fa93 f2a3 	rbit	r2, r3
 8003e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	4b39      	ldr	r3, [pc, #228]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e9a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	6011      	str	r1, [r2, #0]
 8003ea2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ea6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	fa92 f1a2 	rbit	r1, r2
 8003eb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003eb4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003eb8:	6011      	str	r1, [r2, #0]
  return result;
 8003eba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ebe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	fab2 f282 	clz	r2, r2
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f002 021f 	and.w	r2, r2, #31
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d184      	bne.n	8003dea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ee0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee8:	4b23      	ldr	r3, [pc, #140]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	4a22      	ldr	r2, [pc, #136]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003eee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ef2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8242 	beq.w	800438a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f06:	4b1c      	ldr	r3, [pc, #112]	@ (8003f78 <HAL_RCC_OscConfig+0xc58>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	f000 8213 	beq.w	800433a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	f040 8162 	bne.w	80041ea <HAL_RCC_OscConfig+0xeca>
 8003f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003f2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f38:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	fa93 f2a3 	rbit	r2, r3
 8003f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f46:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003f4a:	601a      	str	r2, [r3, #0]
  return result;
 8003f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f50:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003f54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003f60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fb36 	bl	80015dc <HAL_GetTick>
 8003f70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f74:	e00c      	b.n	8003f90 <HAL_RCC_OscConfig+0xc70>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd fb2e 	bl	80015dc <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e1fd      	b.n	800438c <HAL_RCC_OscConfig+0x106c>
 8003f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f94:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003f98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	fa93 f2a3 	rbit	r2, r3
 8003fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003fb4:	601a      	str	r2, [r3, #0]
  return result;
 8003fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003fbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d102      	bne.n	8003fda <HAL_RCC_OscConfig+0xcba>
 8003fd4:	4bb0      	ldr	r3, [pc, #704]	@ (8004298 <HAL_RCC_OscConfig+0xf78>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	e027      	b.n	800402a <HAL_RCC_OscConfig+0xd0a>
 8003fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fde:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003fe2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	fa93 f2a3 	rbit	r2, r3
 8003ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004004:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004008:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004012:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	fa93 f2a3 	rbit	r2, r3
 800401c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004020:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	4b9c      	ldr	r3, [pc, #624]	@ (8004298 <HAL_RCC_OscConfig+0xf78>)
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800402e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004032:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004036:	6011      	str	r1, [r2, #0]
 8004038:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800403c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	fa92 f1a2 	rbit	r1, r2
 8004046:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800404a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800404e:	6011      	str	r1, [r2, #0]
  return result;
 8004050:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004054:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	fab2 f282 	clz	r2, r2
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	f042 0220 	orr.w	r2, r2, #32
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	f002 021f 	and.w	r2, r2, #31
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f202 	lsl.w	r2, r1, r2
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d182      	bne.n	8003f7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004076:	4b88      	ldr	r3, [pc, #544]	@ (8004298 <HAL_RCC_OscConfig+0xf78>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800407e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004082:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800408a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	430b      	orrs	r3, r1
 8004098:	497f      	ldr	r1, [pc, #508]	@ (8004298 <HAL_RCC_OscConfig+0xf78>)
 800409a:	4313      	orrs	r3, r2
 800409c:	604b      	str	r3, [r1, #4]
 800409e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80040a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	fa93 f2a3 	rbit	r2, r3
 80040ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80040c2:	601a      	str	r2, [r3, #0]
  return result;
 80040c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80040cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	461a      	mov	r2, r3
 80040e0:	2301      	movs	r3, #1
 80040e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fd fa7a 	bl	80015dc <HAL_GetTick>
 80040e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ec:	e009      	b.n	8004102 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ee:	f7fd fa75 	bl	80015dc <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e144      	b.n	800438c <HAL_RCC_OscConfig+0x106c>
 8004102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004106:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800410a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800410e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004114:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	fa93 f2a3 	rbit	r2, r3
 800411e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004122:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004126:	601a      	str	r2, [r3, #0]
  return result;
 8004128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004130:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d102      	bne.n	800414c <HAL_RCC_OscConfig+0xe2c>
 8004146:	4b54      	ldr	r3, [pc, #336]	@ (8004298 <HAL_RCC_OscConfig+0xf78>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	e027      	b.n	800419c <HAL_RCC_OscConfig+0xe7c>
 800414c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004150:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004154:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	fa93 f2a3 	rbit	r2, r3
 8004168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004176:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800417a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004184:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	fa93 f2a3 	rbit	r2, r3
 800418e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004192:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	4b3f      	ldr	r3, [pc, #252]	@ (8004298 <HAL_RCC_OscConfig+0xf78>)
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041a0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80041a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80041a8:	6011      	str	r1, [r2, #0]
 80041aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041ae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	fa92 f1a2 	rbit	r1, r2
 80041b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80041c0:	6011      	str	r1, [r2, #0]
  return result;
 80041c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	fab2 f282 	clz	r2, r2
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	f042 0220 	orr.w	r2, r2, #32
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	f002 021f 	and.w	r2, r2, #31
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f202 	lsl.w	r2, r1, r2
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d082      	beq.n	80040ee <HAL_RCC_OscConfig+0xdce>
 80041e8:	e0cf      	b.n	800438a <HAL_RCC_OscConfig+0x106a>
 80041ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80041f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	fa93 f2a3 	rbit	r2, r3
 8004206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800420e:	601a      	str	r2, [r3, #0]
  return result;
 8004210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004214:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004218:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004224:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	461a      	mov	r2, r3
 800422c:	2300      	movs	r3, #0
 800422e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fd f9d4 	bl	80015dc <HAL_GetTick>
 8004234:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004238:	e009      	b.n	800424e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423a:	f7fd f9cf 	bl	80015dc <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e09e      	b.n	800438c <HAL_RCC_OscConfig+0x106c>
 800424e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004252:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004256:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800425a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004260:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	fa93 f2a3 	rbit	r2, r3
 800426a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004272:	601a      	str	r2, [r3, #0]
  return result;
 8004274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004278:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800427c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d104      	bne.n	800429c <HAL_RCC_OscConfig+0xf7c>
 8004292:	4b01      	ldr	r3, [pc, #4]	@ (8004298 <HAL_RCC_OscConfig+0xf78>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	e029      	b.n	80042ec <HAL_RCC_OscConfig+0xfcc>
 8004298:	40021000 	.word	0x40021000
 800429c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80042a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	fa93 f2a3 	rbit	r2, r3
 80042b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042bc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80042ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004398 <HAL_RCC_OscConfig+0x1078>)
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042f0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80042f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80042f8:	6011      	str	r1, [r2, #0]
 80042fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042fe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	fa92 f1a2 	rbit	r1, r2
 8004308:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800430c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004310:	6011      	str	r1, [r2, #0]
  return result;
 8004312:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004316:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	fab2 f282 	clz	r2, r2
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f042 0220 	orr.w	r2, r2, #32
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	f002 021f 	and.w	r2, r2, #31
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f202 	lsl.w	r2, r1, r2
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d180      	bne.n	800423a <HAL_RCC_OscConfig+0xf1a>
 8004338:	e027      	b.n	800438a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e01e      	b.n	800438c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800434e:	4b12      	ldr	r3, [pc, #72]	@ (8004398 <HAL_RCC_OscConfig+0x1078>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004356:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800435a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800435e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004362:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	429a      	cmp	r2, r3
 800436c:	d10b      	bne.n	8004386 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800436e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004372:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004382:	429a      	cmp	r2, r3
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000

0800439c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b09e      	sub	sp, #120	@ 0x78
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e162      	b.n	800467a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b4:	4b90      	ldr	r3, [pc, #576]	@ (80045f8 <HAL_RCC_ClockConfig+0x25c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d910      	bls.n	80043e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b8d      	ldr	r3, [pc, #564]	@ (80045f8 <HAL_RCC_ClockConfig+0x25c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 0207 	bic.w	r2, r3, #7
 80043ca:	498b      	ldr	r1, [pc, #556]	@ (80045f8 <HAL_RCC_ClockConfig+0x25c>)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d2:	4b89      	ldr	r3, [pc, #548]	@ (80045f8 <HAL_RCC_ClockConfig+0x25c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e14a      	b.n	800467a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f0:	4b82      	ldr	r3, [pc, #520]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	497f      	ldr	r1, [pc, #508]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80dc 	beq.w	80045c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d13c      	bne.n	8004492 <HAL_RCC_ClockConfig+0xf6>
 8004418:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800441c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004420:	fa93 f3a3 	rbit	r3, r3
 8004424:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004428:	fab3 f383 	clz	r3, r3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d102      	bne.n	8004442 <HAL_RCC_ClockConfig+0xa6>
 800443c:	4b6f      	ldr	r3, [pc, #444]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	e00f      	b.n	8004462 <HAL_RCC_ClockConfig+0xc6>
 8004442:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004446:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004450:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004454:	663b      	str	r3, [r7, #96]	@ 0x60
 8004456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800445e:	4b67      	ldr	r3, [pc, #412]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004466:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004468:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800446a:	fa92 f2a2 	rbit	r2, r2
 800446e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004470:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004472:	fab2 f282 	clz	r2, r2
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	f042 0220 	orr.w	r2, r2, #32
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	f002 021f 	and.w	r2, r2, #31
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d17b      	bne.n	8004586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e0f3      	b.n	800467a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d13c      	bne.n	8004514 <HAL_RCC_ClockConfig+0x178>
 800449a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800449e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80044a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d102      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x128>
 80044be:	4b4f      	ldr	r3, [pc, #316]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	e00f      	b.n	80044e4 <HAL_RCC_ClockConfig+0x148>
 80044c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80044d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e0:	4b46      	ldr	r3, [pc, #280]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044e8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80044ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044ec:	fa92 f2a2 	rbit	r2, r2
 80044f0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80044f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	f042 0220 	orr.w	r2, r2, #32
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f002 021f 	and.w	r2, r2, #31
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d13a      	bne.n	8004586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0b2      	b.n	800467a <HAL_RCC_ClockConfig+0x2de>
 8004514:	2302      	movs	r3, #2
 8004516:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	fa93 f3a3 	rbit	r3, r3
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d102      	bne.n	800453c <HAL_RCC_ClockConfig+0x1a0>
 8004536:	4b31      	ldr	r3, [pc, #196]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	e00d      	b.n	8004558 <HAL_RCC_ClockConfig+0x1bc>
 800453c:	2302      	movs	r3, #2
 800453e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	fa93 f3a3 	rbit	r3, r3
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
 8004548:	2302      	movs	r3, #2
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	4b29      	ldr	r3, [pc, #164]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	2202      	movs	r2, #2
 800455a:	61ba      	str	r2, [r7, #24]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	fa92 f2a2 	rbit	r2, r2
 8004562:	617a      	str	r2, [r7, #20]
  return result;
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	fab2 f282 	clz	r2, r2
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	f042 0220 	orr.w	r2, r2, #32
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	f002 021f 	and.w	r2, r2, #31
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e079      	b.n	800467a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004586:	4b1d      	ldr	r3, [pc, #116]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	491a      	ldr	r1, [pc, #104]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 8004594:	4313      	orrs	r3, r2
 8004596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004598:	f7fd f820 	bl	80015dc <HAL_GetTick>
 800459c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7fd f81c 	bl	80015dc <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e061      	b.n	800467a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <HAL_RCC_ClockConfig+0x260>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 020c 	and.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1eb      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045c8:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <HAL_RCC_ClockConfig+0x25c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d214      	bcs.n	8004600 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <HAL_RCC_ClockConfig+0x25c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 0207 	bic.w	r2, r3, #7
 80045de:	4906      	ldr	r1, [pc, #24]	@ (80045f8 <HAL_RCC_ClockConfig+0x25c>)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b04      	ldr	r3, [pc, #16]	@ (80045f8 <HAL_RCC_ClockConfig+0x25c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e040      	b.n	800467a <HAL_RCC_ClockConfig+0x2de>
 80045f8:	40022000 	.word	0x40022000
 80045fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800460c:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <HAL_RCC_ClockConfig+0x2e8>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	491a      	ldr	r1, [pc, #104]	@ (8004684 <HAL_RCC_ClockConfig+0x2e8>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462a:	4b16      	ldr	r3, [pc, #88]	@ (8004684 <HAL_RCC_ClockConfig+0x2e8>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4912      	ldr	r1, [pc, #72]	@ (8004684 <HAL_RCC_ClockConfig+0x2e8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800463e:	f000 f829 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8004642:	4601      	mov	r1, r0
 8004644:	4b0f      	ldr	r3, [pc, #60]	@ (8004684 <HAL_RCC_ClockConfig+0x2e8>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800464c:	22f0      	movs	r2, #240	@ 0xf0
 800464e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	fa92 f2a2 	rbit	r2, r2
 8004656:	60fa      	str	r2, [r7, #12]
  return result;
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	fab2 f282 	clz	r2, r2
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	40d3      	lsrs	r3, r2
 8004662:	4a09      	ldr	r2, [pc, #36]	@ (8004688 <HAL_RCC_ClockConfig+0x2ec>)
 8004664:	5cd3      	ldrb	r3, [r2, r3]
 8004666:	fa21 f303 	lsr.w	r3, r1, r3
 800466a:	4a08      	ldr	r2, [pc, #32]	@ (800468c <HAL_RCC_ClockConfig+0x2f0>)
 800466c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800466e:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <HAL_RCC_ClockConfig+0x2f4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc ff6e 	bl	8001554 <HAL_InitTick>
  
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3778      	adds	r7, #120	@ 0x78
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	08006000 	.word	0x08006000
 800468c:	20000004 	.word	0x20000004
 8004690:	20000008 	.word	0x20000008

08004694 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80046ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x94>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d002      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0x30>
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d003      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0x36>
 80046c2:	e026      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046c4:	4b19      	ldr	r3, [pc, #100]	@ (800472c <HAL_RCC_GetSysClockFreq+0x98>)
 80046c6:	613b      	str	r3, [r7, #16]
      break;
 80046c8:	e026      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	0c9b      	lsrs	r3, r3, #18
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	4a17      	ldr	r2, [pc, #92]	@ (8004730 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046d4:	5cd3      	ldrb	r3, [r2, r3]
 80046d6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x94>)
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	4a14      	ldr	r2, [pc, #80]	@ (8004734 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046e2:	5cd3      	ldrb	r3, [r2, r3]
 80046e4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046f0:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <HAL_RCC_GetSysClockFreq+0x98>)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e004      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	613b      	str	r3, [r7, #16]
      break;
 8004710:	e002      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCC_GetSysClockFreq+0x98>)
 8004714:	613b      	str	r3, [r7, #16]
      break;
 8004716:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004718:	693b      	ldr	r3, [r7, #16]
}
 800471a:	4618      	mov	r0, r3
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	007a1200 	.word	0x007a1200
 8004730:	08006010 	.word	0x08006010
 8004734:	08006020 	.word	0x08006020
 8004738:	003d0900 	.word	0x003d0900

0800473c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b092      	sub	sp, #72	@ 0x48
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800474c:	2300      	movs	r3, #0
 800474e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80d4 	beq.w	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004760:	4b4e      	ldr	r3, [pc, #312]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10e      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476c:	4b4b      	ldr	r3, [pc, #300]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	4a4a      	ldr	r2, [pc, #296]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004776:	61d3      	str	r3, [r2, #28]
 8004778:	4b48      	ldr	r3, [pc, #288]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	4b45      	ldr	r3, [pc, #276]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d118      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004796:	4b42      	ldr	r3, [pc, #264]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a41      	ldr	r2, [pc, #260]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a2:	f7fc ff1b 	bl	80015dc <HAL_GetTick>
 80047a6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	e008      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047aa:	f7fc ff17 	bl	80015dc <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b64      	cmp	r3, #100	@ 0x64
 80047b6:	d901      	bls.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e169      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047bc:	4b38      	ldr	r3, [pc, #224]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c8:	4b34      	ldr	r3, [pc, #208]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8084 	beq.w	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d07c      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e8:	4b2c      	ldr	r3, [pc, #176]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	4b26      	ldr	r3, [pc, #152]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	461a      	mov	r2, r3
 8004812:	2301      	movs	r3, #1
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004826:	fab3 f383 	clz	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	4b1d      	ldr	r3, [pc, #116]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	461a      	mov	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800483a:	4a18      	ldr	r2, [pc, #96]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800483e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04b      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fc fec7 	bl	80015dc <HAL_GetTick>
 800484e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	e00a      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fc fec3 	bl	80015dc <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e113      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004868:	2302      	movs	r3, #2
 800486a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
 8004874:	2302      	movs	r3, #2
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	61fb      	str	r3, [r7, #28]
  return result;
 8004880:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d108      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004896:	4b01      	ldr	r3, [pc, #4]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	e00d      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800489c:	40021000 	.word	0x40021000
 80048a0:	40007000 	.word	0x40007000
 80048a4:	10908100 	.word	0x10908100
 80048a8:	2302      	movs	r3, #2
 80048aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fa93 f3a3 	rbit	r3, r3
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	4b78      	ldr	r3, [pc, #480]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	2202      	movs	r2, #2
 80048ba:	613a      	str	r2, [r7, #16]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	fa92 f2a2 	rbit	r2, r2
 80048c2:	60fa      	str	r2, [r7, #12]
  return result;
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	fab2 f282 	clz	r2, r2
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	f002 021f 	and.w	r2, r2, #31
 80048d6:	2101      	movs	r1, #1
 80048d8:	fa01 f202 	lsl.w	r2, r1, r2
 80048dc:	4013      	ands	r3, r2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0b7      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	496a      	ldr	r1, [pc, #424]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fc:	4b66      	ldr	r3, [pc, #408]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	4a65      	ldr	r2, [pc, #404]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004906:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004914:	4b60      	ldr	r3, [pc, #384]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	f023 0203 	bic.w	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	495d      	ldr	r1, [pc, #372]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004932:	4b59      	ldr	r3, [pc, #356]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4956      	ldr	r1, [pc, #344]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004940:	4313      	orrs	r3, r2
 8004942:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004950:	4b51      	ldr	r3, [pc, #324]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	494e      	ldr	r1, [pc, #312]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800496e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4947      	ldr	r1, [pc, #284]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800497c:	4313      	orrs	r3, r2
 800497e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800498c:	4b42      	ldr	r3, [pc, #264]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004998:	493f      	ldr	r1, [pc, #252]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	f023 0220 	bic.w	r2, r3, #32
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	4938      	ldr	r1, [pc, #224]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049c8:	4b33      	ldr	r3, [pc, #204]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	4930      	ldr	r1, [pc, #192]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	4929      	ldr	r1, [pc, #164]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a04:	4b24      	ldr	r3, [pc, #144]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	4921      	ldr	r1, [pc, #132]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a22:	4b1d      	ldr	r3, [pc, #116]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	491a      	ldr	r1, [pc, #104]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a40:	4b15      	ldr	r3, [pc, #84]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	4912      	ldr	r1, [pc, #72]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	490b      	ldr	r1, [pc, #44]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a7c:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a88:	4903      	ldr	r1, [pc, #12]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3748      	adds	r7, #72	@ 0x48
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000

08004a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e049      	b.n	8004b42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc fb2a 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 fd0a 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e04a      	b.n	8004bfa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a21      	ldr	r2, [pc, #132]	@ (8004c08 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d018      	beq.n	8004bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8e:	d013      	beq.n	8004bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	@ (8004c0c <HAL_TIM_Base_Start_IT+0xc0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00e      	beq.n	8004bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8004c14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d004      	beq.n	8004bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a19      	ldr	r2, [pc, #100]	@ (8004c18 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d115      	bne.n	8004be4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	4b17      	ldr	r3, [pc, #92]	@ (8004c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b06      	cmp	r3, #6
 8004bc8:	d015      	beq.n	8004bf6 <HAL_TIM_Base_Start_IT+0xaa>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd0:	d011      	beq.n	8004bf6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	e008      	b.n	8004bf6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e000      	b.n	8004bf8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40013400 	.word	0x40013400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	00010007 	.word	0x00010007

08004c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e049      	b.n	8004cc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fa48 	bl	80010dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f000 fc48 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_TIM_PWM_Start+0x24>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e03c      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d109      	bne.n	8004d0e <HAL_TIM_PWM_Start+0x3e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e02f      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d109      	bne.n	8004d28 <HAL_TIM_PWM_Start+0x58>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e022      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d109      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x72>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	e015      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d109      	bne.n	8004d5c <HAL_TIM_PWM_Start+0x8c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e008      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e097      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_PWM_Start+0xb6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d84:	e023      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_PWM_Start+0xc6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d94:	e01b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xd6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004da4:	e013      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0xe6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004db4:	e00b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xf6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dc4:	e003      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 ff98 	bl	8005d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a33      	ldr	r2, [pc, #204]	@ (8004eb0 <HAL_TIM_PWM_Start+0x1e0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a32      	ldr	r2, [pc, #200]	@ (8004eb4 <HAL_TIM_PWM_Start+0x1e4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a30      	ldr	r2, [pc, #192]	@ (8004eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8004ebc <HAL_TIM_PWM_Start+0x1ec>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_PWM_Start+0x142>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_TIM_PWM_Start+0x144>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a20      	ldr	r2, [pc, #128]	@ (8004eb0 <HAL_TIM_PWM_Start+0x1e0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d018      	beq.n	8004e64 <HAL_TIM_PWM_Start+0x194>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3a:	d013      	beq.n	8004e64 <HAL_TIM_PWM_Start+0x194>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a20      	ldr	r2, [pc, #128]	@ (8004ec4 <HAL_TIM_PWM_Start+0x1f4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00e      	beq.n	8004e64 <HAL_TIM_PWM_Start+0x194>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec8 <HAL_TIM_PWM_Start+0x1f8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d009      	beq.n	8004e64 <HAL_TIM_PWM_Start+0x194>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a17      	ldr	r2, [pc, #92]	@ (8004eb4 <HAL_TIM_PWM_Start+0x1e4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_TIM_PWM_Start+0x194>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a16      	ldr	r2, [pc, #88]	@ (8004eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d115      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	4b18      	ldr	r3, [pc, #96]	@ (8004ecc <HAL_TIM_PWM_Start+0x1fc>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d015      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x1d2>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7c:	d011      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	e008      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e000      	b.n	8004ea4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40012c00 	.word	0x40012c00
 8004eb4:	40013400 	.word	0x40013400
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	00010007 	.word	0x00010007

08004ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d020      	beq.n	8004f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01b      	beq.n	8004f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0202 	mvn.w	r2, #2
 8004f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 facb 	bl	80054b6 <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fabd 	bl	80054a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 face 	bl	80054ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d020      	beq.n	8004f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01b      	beq.n	8004f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0204 	mvn.w	r2, #4
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2202      	movs	r2, #2
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 faa5 	bl	80054b6 <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fa97 	bl	80054a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 faa8 	bl	80054ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d020      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01b      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0208 	mvn.w	r2, #8
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa7f 	bl	80054b6 <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa71 	bl	80054a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fa82 	bl	80054ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d020      	beq.n	8005018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01b      	beq.n	8005018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0210 	mvn.w	r2, #16
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2208      	movs	r2, #8
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa59 	bl	80054b6 <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa4b 	bl	80054a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa5c 	bl	80054ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0201 	mvn.w	r2, #1
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa29 	bl	800548e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 ff84 	bl	8005f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 ff7c 	bl	8005f7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00c      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa1b 	bl	80054de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0220 	mvn.w	r2, #32
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 ff44 	bl	8005f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e0ff      	b.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b14      	cmp	r3, #20
 80050fe:	f200 80f0 	bhi.w	80052e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005102:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800515d 	.word	0x0800515d
 800510c:	080052e3 	.word	0x080052e3
 8005110:	080052e3 	.word	0x080052e3
 8005114:	080052e3 	.word	0x080052e3
 8005118:	0800519d 	.word	0x0800519d
 800511c:	080052e3 	.word	0x080052e3
 8005120:	080052e3 	.word	0x080052e3
 8005124:	080052e3 	.word	0x080052e3
 8005128:	080051df 	.word	0x080051df
 800512c:	080052e3 	.word	0x080052e3
 8005130:	080052e3 	.word	0x080052e3
 8005134:	080052e3 	.word	0x080052e3
 8005138:	0800521f 	.word	0x0800521f
 800513c:	080052e3 	.word	0x080052e3
 8005140:	080052e3 	.word	0x080052e3
 8005144:	080052e3 	.word	0x080052e3
 8005148:	08005261 	.word	0x08005261
 800514c:	080052e3 	.word	0x080052e3
 8005150:	080052e3 	.word	0x080052e3
 8005154:	080052e3 	.word	0x080052e3
 8005158:	080052a1 	.word	0x080052a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fa62 	bl	800562c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0208 	orr.w	r2, r2, #8
 8005176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0204 	bic.w	r2, r2, #4
 8005186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6999      	ldr	r1, [r3, #24]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	619a      	str	r2, [r3, #24]
      break;
 800519a:	e0a5      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fad2 	bl	800574c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6999      	ldr	r1, [r3, #24]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	619a      	str	r2, [r3, #24]
      break;
 80051dc:	e084      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fb3b 	bl	8005860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0208 	orr.w	r2, r2, #8
 80051f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0204 	bic.w	r2, r2, #4
 8005208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69d9      	ldr	r1, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	61da      	str	r2, [r3, #28]
      break;
 800521c:	e064      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fba3 	bl	8005970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69d9      	ldr	r1, [r3, #28]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	021a      	lsls	r2, r3, #8
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	61da      	str	r2, [r3, #28]
      break;
 800525e:	e043      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fbec 	bl	8005a44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0208 	orr.w	r2, r2, #8
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0204 	bic.w	r2, r2, #4
 800528a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800529e:	e023      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fc30 	bl	8005b0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	021a      	lsls	r2, r3, #8
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052e0:	e002      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
      break;
 80052e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop

080052fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_TIM_ConfigClockSource+0x1c>
 8005314:	2302      	movs	r3, #2
 8005316:	e0b6      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x18a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005336:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800533a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005354:	d03e      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0xd8>
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800535a:	f200 8087 	bhi.w	800546c <HAL_TIM_ConfigClockSource+0x170>
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005362:	f000 8086 	beq.w	8005472 <HAL_TIM_ConfigClockSource+0x176>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536a:	d87f      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x170>
 800536c:	2b70      	cmp	r3, #112	@ 0x70
 800536e:	d01a      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0xaa>
 8005370:	2b70      	cmp	r3, #112	@ 0x70
 8005372:	d87b      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x170>
 8005374:	2b60      	cmp	r3, #96	@ 0x60
 8005376:	d050      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x11e>
 8005378:	2b60      	cmp	r3, #96	@ 0x60
 800537a:	d877      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x170>
 800537c:	2b50      	cmp	r3, #80	@ 0x50
 800537e:	d03c      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0xfe>
 8005380:	2b50      	cmp	r3, #80	@ 0x50
 8005382:	d873      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x170>
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	d058      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x13e>
 8005388:	2b40      	cmp	r3, #64	@ 0x40
 800538a:	d86f      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x170>
 800538c:	2b30      	cmp	r3, #48	@ 0x30
 800538e:	d064      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15e>
 8005390:	2b30      	cmp	r3, #48	@ 0x30
 8005392:	d86b      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x170>
 8005394:	2b20      	cmp	r3, #32
 8005396:	d060      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15e>
 8005398:	2b20      	cmp	r3, #32
 800539a:	d867      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x170>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d05c      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15e>
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d05a      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15e>
 80053a4:	e062      	b.n	800546c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053b6:	f000 fc89 	bl	8005ccc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	609a      	str	r2, [r3, #8]
      break;
 80053d2:	e04f      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053e4:	f000 fc72 	bl	8005ccc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053f6:	609a      	str	r2, [r3, #8]
      break;
 80053f8:	e03c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	461a      	mov	r2, r3
 8005408:	f000 fbe6 	bl	8005bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2150      	movs	r1, #80	@ 0x50
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fc3f 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 8005418:	e02c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005426:	461a      	mov	r2, r3
 8005428:	f000 fc05 	bl	8005c36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2160      	movs	r1, #96	@ 0x60
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fc2f 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 8005438:	e01c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	461a      	mov	r2, r3
 8005448:	f000 fbc6 	bl	8005bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2140      	movs	r1, #64	@ 0x40
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fc1f 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 8005458:	e00c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f000 fc16 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 800546a:	e003      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      break;
 8005470:	e000      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a42      	ldr	r2, [pc, #264]	@ (8005610 <TIM_Base_SetConfig+0x11c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00f      	beq.n	800552c <TIM_Base_SetConfig+0x38>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005512:	d00b      	beq.n	800552c <TIM_Base_SetConfig+0x38>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3f      	ldr	r2, [pc, #252]	@ (8005614 <TIM_Base_SetConfig+0x120>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_Base_SetConfig+0x38>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3e      	ldr	r2, [pc, #248]	@ (8005618 <TIM_Base_SetConfig+0x124>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0x38>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a3d      	ldr	r2, [pc, #244]	@ (800561c <TIM_Base_SetConfig+0x128>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d108      	bne.n	800553e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a33      	ldr	r2, [pc, #204]	@ (8005610 <TIM_Base_SetConfig+0x11c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01b      	beq.n	800557e <TIM_Base_SetConfig+0x8a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800554c:	d017      	beq.n	800557e <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a30      	ldr	r2, [pc, #192]	@ (8005614 <TIM_Base_SetConfig+0x120>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <TIM_Base_SetConfig+0x8a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2f      	ldr	r2, [pc, #188]	@ (8005618 <TIM_Base_SetConfig+0x124>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00f      	beq.n	800557e <TIM_Base_SetConfig+0x8a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2e      	ldr	r2, [pc, #184]	@ (800561c <TIM_Base_SetConfig+0x128>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00b      	beq.n	800557e <TIM_Base_SetConfig+0x8a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2d      	ldr	r2, [pc, #180]	@ (8005620 <TIM_Base_SetConfig+0x12c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_Base_SetConfig+0x8a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2c      	ldr	r2, [pc, #176]	@ (8005624 <TIM_Base_SetConfig+0x130>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_Base_SetConfig+0x8a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2b      	ldr	r2, [pc, #172]	@ (8005628 <TIM_Base_SetConfig+0x134>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d108      	bne.n	8005590 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a16      	ldr	r2, [pc, #88]	@ (8005610 <TIM_Base_SetConfig+0x11c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00f      	beq.n	80055dc <TIM_Base_SetConfig+0xe8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a17      	ldr	r2, [pc, #92]	@ (800561c <TIM_Base_SetConfig+0x128>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00b      	beq.n	80055dc <TIM_Base_SetConfig+0xe8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a16      	ldr	r2, [pc, #88]	@ (8005620 <TIM_Base_SetConfig+0x12c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d007      	beq.n	80055dc <TIM_Base_SetConfig+0xe8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a15      	ldr	r2, [pc, #84]	@ (8005624 <TIM_Base_SetConfig+0x130>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_Base_SetConfig+0xe8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a14      	ldr	r2, [pc, #80]	@ (8005628 <TIM_Base_SetConfig+0x134>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d103      	bne.n	80055e4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d105      	bne.n	8005602 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	611a      	str	r2, [r3, #16]
  }
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800
 800561c:	40013400 	.word	0x40013400
 8005620:	40014000 	.word	0x40014000
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800

0800562c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f023 0201 	bic.w	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800565a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f023 0302 	bic.w	r3, r3, #2
 8005678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a2c      	ldr	r2, [pc, #176]	@ (8005738 <TIM_OC1_SetConfig+0x10c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00f      	beq.n	80056ac <TIM_OC1_SetConfig+0x80>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a2b      	ldr	r2, [pc, #172]	@ (800573c <TIM_OC1_SetConfig+0x110>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00b      	beq.n	80056ac <TIM_OC1_SetConfig+0x80>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a2a      	ldr	r2, [pc, #168]	@ (8005740 <TIM_OC1_SetConfig+0x114>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <TIM_OC1_SetConfig+0x80>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a29      	ldr	r2, [pc, #164]	@ (8005744 <TIM_OC1_SetConfig+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_OC1_SetConfig+0x80>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a28      	ldr	r2, [pc, #160]	@ (8005748 <TIM_OC1_SetConfig+0x11c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d10c      	bne.n	80056c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0308 	bic.w	r3, r3, #8
 80056b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 0304 	bic.w	r3, r3, #4
 80056c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005738 <TIM_OC1_SetConfig+0x10c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00f      	beq.n	80056ee <TIM_OC1_SetConfig+0xc2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1a      	ldr	r2, [pc, #104]	@ (800573c <TIM_OC1_SetConfig+0x110>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_OC1_SetConfig+0xc2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a19      	ldr	r2, [pc, #100]	@ (8005740 <TIM_OC1_SetConfig+0x114>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <TIM_OC1_SetConfig+0xc2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a18      	ldr	r2, [pc, #96]	@ (8005744 <TIM_OC1_SetConfig+0x118>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_OC1_SetConfig+0xc2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a17      	ldr	r2, [pc, #92]	@ (8005748 <TIM_OC1_SetConfig+0x11c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d111      	bne.n	8005712 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	621a      	str	r2, [r3, #32]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	40012c00 	.word	0x40012c00
 800573c:	40013400 	.word	0x40013400
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800

0800574c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f023 0210 	bic.w	r2, r3, #16
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0320 	bic.w	r3, r3, #32
 800579a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a28      	ldr	r2, [pc, #160]	@ (800584c <TIM_OC2_SetConfig+0x100>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC2_SetConfig+0x6c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a27      	ldr	r2, [pc, #156]	@ (8005850 <TIM_OC2_SetConfig+0x104>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d10d      	bne.n	80057d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1d      	ldr	r2, [pc, #116]	@ (800584c <TIM_OC2_SetConfig+0x100>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00f      	beq.n	80057fc <TIM_OC2_SetConfig+0xb0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a1c      	ldr	r2, [pc, #112]	@ (8005850 <TIM_OC2_SetConfig+0x104>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00b      	beq.n	80057fc <TIM_OC2_SetConfig+0xb0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005854 <TIM_OC2_SetConfig+0x108>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d007      	beq.n	80057fc <TIM_OC2_SetConfig+0xb0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005858 <TIM_OC2_SetConfig+0x10c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_OC2_SetConfig+0xb0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a19      	ldr	r2, [pc, #100]	@ (800585c <TIM_OC2_SetConfig+0x110>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d113      	bne.n	8005824 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005802:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800580a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40013400 	.word	0x40013400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800

08005860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800588e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a27      	ldr	r2, [pc, #156]	@ (800595c <TIM_OC3_SetConfig+0xfc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_OC3_SetConfig+0x6a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a26      	ldr	r2, [pc, #152]	@ (8005960 <TIM_OC3_SetConfig+0x100>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d10d      	bne.n	80058e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a1c      	ldr	r2, [pc, #112]	@ (800595c <TIM_OC3_SetConfig+0xfc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00f      	beq.n	800590e <TIM_OC3_SetConfig+0xae>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005960 <TIM_OC3_SetConfig+0x100>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <TIM_OC3_SetConfig+0xae>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005964 <TIM_OC3_SetConfig+0x104>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <TIM_OC3_SetConfig+0xae>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a19      	ldr	r2, [pc, #100]	@ (8005968 <TIM_OC3_SetConfig+0x108>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_OC3_SetConfig+0xae>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a18      	ldr	r2, [pc, #96]	@ (800596c <TIM_OC3_SetConfig+0x10c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d113      	bne.n	8005936 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800591c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	621a      	str	r2, [r3, #32]
}
 8005950:	bf00      	nop
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40013400 	.word	0x40013400
 8005964:	40014000 	.word	0x40014000
 8005968:	40014400 	.word	0x40014400
 800596c:	40014800 	.word	0x40014800

08005970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800599e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	031b      	lsls	r3, r3, #12
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a18      	ldr	r2, [pc, #96]	@ (8005a30 <TIM_OC4_SetConfig+0xc0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00f      	beq.n	80059f4 <TIM_OC4_SetConfig+0x84>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <TIM_OC4_SetConfig+0xc4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00b      	beq.n	80059f4 <TIM_OC4_SetConfig+0x84>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <TIM_OC4_SetConfig+0xc8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d007      	beq.n	80059f4 <TIM_OC4_SetConfig+0x84>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a15      	ldr	r2, [pc, #84]	@ (8005a3c <TIM_OC4_SetConfig+0xcc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_OC4_SetConfig+0x84>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a14      	ldr	r2, [pc, #80]	@ (8005a40 <TIM_OC4_SetConfig+0xd0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d109      	bne.n	8005a08 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	019b      	lsls	r3, r3, #6
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40013400 	.word	0x40013400
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40014400 	.word	0x40014400
 8005a40:	40014800 	.word	0x40014800

08005a44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	041b      	lsls	r3, r3, #16
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a17      	ldr	r2, [pc, #92]	@ (8005af8 <TIM_OC5_SetConfig+0xb4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00f      	beq.n	8005abe <TIM_OC5_SetConfig+0x7a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a16      	ldr	r2, [pc, #88]	@ (8005afc <TIM_OC5_SetConfig+0xb8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_OC5_SetConfig+0x7a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a15      	ldr	r2, [pc, #84]	@ (8005b00 <TIM_OC5_SetConfig+0xbc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_OC5_SetConfig+0x7a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a14      	ldr	r2, [pc, #80]	@ (8005b04 <TIM_OC5_SetConfig+0xc0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_OC5_SetConfig+0x7a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a13      	ldr	r2, [pc, #76]	@ (8005b08 <TIM_OC5_SetConfig+0xc4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d109      	bne.n	8005ad2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	621a      	str	r2, [r3, #32]
}
 8005aec:	bf00      	nop
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	40013400 	.word	0x40013400
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40014400 	.word	0x40014400
 8005b08:	40014800 	.word	0x40014800

08005b0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	051b      	lsls	r3, r3, #20
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a18      	ldr	r2, [pc, #96]	@ (8005bc4 <TIM_OC6_SetConfig+0xb8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00f      	beq.n	8005b88 <TIM_OC6_SetConfig+0x7c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	@ (8005bc8 <TIM_OC6_SetConfig+0xbc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <TIM_OC6_SetConfig+0x7c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a16      	ldr	r2, [pc, #88]	@ (8005bcc <TIM_OC6_SetConfig+0xc0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_OC6_SetConfig+0x7c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	@ (8005bd0 <TIM_OC6_SetConfig+0xc4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC6_SetConfig+0x7c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a14      	ldr	r2, [pc, #80]	@ (8005bd4 <TIM_OC6_SetConfig+0xc8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d109      	bne.n	8005b9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	029b      	lsls	r3, r3, #10
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40013400 	.word	0x40013400
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40014400 	.word	0x40014400
 8005bd4:	40014800 	.word	0x40014800

08005bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0201 	bic.w	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f023 030a 	bic.w	r3, r3, #10
 8005c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b087      	sub	sp, #28
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f023 0210 	bic.w	r2, r3, #16
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	031b      	lsls	r3, r3, #12
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f043 0307 	orr.w	r3, r3, #7
 8005cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	609a      	str	r2, [r3, #8]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	021a      	lsls	r2, r3, #8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 031f 	and.w	r3, r3, #31
 8005d1e:	2201      	movs	r2, #1
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1a      	ldr	r2, [r3, #32]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	401a      	ands	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	fa01 f303 	lsl.w	r3, r1, r3
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e063      	b.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a2b      	ldr	r2, [pc, #172]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005daa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de2:	d013      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a18      	ldr	r2, [pc, #96]	@ (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a17      	ldr	r2, [pc, #92]	@ (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a12      	ldr	r2, [pc, #72]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a13      	ldr	r2, [pc, #76]	@ (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10c      	bne.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40013400 	.word	0x40013400
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40014000 	.word	0x40014000

08005e58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e065      	b.n	8005f40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	041b      	lsls	r3, r3, #16
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a16      	ldr	r2, [pc, #88]	@ (8005f4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a14      	ldr	r2, [pc, #80]	@ (8005f50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d115      	bne.n	8005f2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0c:	051b      	lsls	r3, r3, #20
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40013400 	.word	0x40013400

08005f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <memset>:
 8005f90:	4402      	add	r2, r0
 8005f92:	4603      	mov	r3, r0
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d100      	bne.n	8005f9a <memset+0xa>
 8005f98:	4770      	bx	lr
 8005f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f9e:	e7f9      	b.n	8005f94 <memset+0x4>

08005fa0 <__libc_init_array>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd8 <__libc_init_array+0x38>)
 8005fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8005fdc <__libc_init_array+0x3c>)
 8005fa6:	1b64      	subs	r4, r4, r5
 8005fa8:	10a4      	asrs	r4, r4, #2
 8005faa:	2600      	movs	r6, #0
 8005fac:	42a6      	cmp	r6, r4
 8005fae:	d109      	bne.n	8005fc4 <__libc_init_array+0x24>
 8005fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8005fe0 <__libc_init_array+0x40>)
 8005fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8005fe4 <__libc_init_array+0x44>)
 8005fb4:	f000 f818 	bl	8005fe8 <_init>
 8005fb8:	1b64      	subs	r4, r4, r5
 8005fba:	10a4      	asrs	r4, r4, #2
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	42a6      	cmp	r6, r4
 8005fc0:	d105      	bne.n	8005fce <__libc_init_array+0x2e>
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
 8005fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc8:	4798      	blx	r3
 8005fca:	3601      	adds	r6, #1
 8005fcc:	e7ee      	b.n	8005fac <__libc_init_array+0xc>
 8005fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd2:	4798      	blx	r3
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	e7f2      	b.n	8005fbe <__libc_init_array+0x1e>
 8005fd8:	08006030 	.word	0x08006030
 8005fdc:	08006030 	.word	0x08006030
 8005fe0:	08006030 	.word	0x08006030
 8005fe4:	08006034 	.word	0x08006034

08005fe8 <_init>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr

08005ff4 <_fini>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr
